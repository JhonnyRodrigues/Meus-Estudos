algoritmo "Valores_Pares"
// Função : Entender variáveis compostas unidimensionais/vetores
// Autor :  Guanabara
// Data : 11/06/2019

var
   Val: vetor[1..7] de Inteiro
   i, TotPar: Inteiro	//i = índice
inicio
      TotPar <- 0
      Para i <- 1 ate 7 faca    // varíavel composta (i)
      Escreva ("Digite o ", i, "º valor: ")
      Leia (val[i])        //leia na posição [i]
      FimPara
      
      Para i <- 1 ate 7 faca
           Se (val[i] % 2 = 0) entao
           TotPar <- TotPar + 1
           EscrevaL("Valor PAR encontrado na posição ", i)
           FimSe
      FimPara
      EscrevaL("O total de pares foi ", TotPar)
fimalgoritmo


-----------------------------------------------------------------


algoritmo "Turma"
// Função : após inserir 4 alunos e suas notas, calcula a média da turma e quantos alunos estão abaixo da média
// Autor : Guanabara
// Data : 11/06/2019
// Seção de Declarações 
var
    nome: vetor[1..4] de caractere		//nome alunos
    n1: vetor[1..4] de real             //nota1
    n2: vetor[1..4] de real             //nota2
    m: vetor[1..4] de real              //média dos alunos
    i, tot: inteiro     		//índice e total alunos acima da media
    SM, MT: real                 //soma das medias e media da turma
    
	
inicio
      Para i <- 1 ate 4 faca
           EscrevaL("ALUNO", i)
           Escreva("Nome: ")
           Leia(nome[i])
           Escreva("Primeira Nota: ")
           Leia(n1[i])
           Escreva("Segunda Nota: ")
           Leia(n2[i])
           m[i] <- (n1[i] + n2[i]) / 2
           SM <- SM + m[i]	//soma das médias recebe média do aluno
      FimPara
      MT <- SM/4	//média total
      LimpaTela
      
      EscrevaL("    LISTAGEM DE ALUNOS")
      EscrevaL("----------------------------")
      Para i <- 1 ate 4 faca
           EscrevaL(nome[i]:15, m[i]:4:1)   // nome ocupando 15 espaços para um perfeito alinhamento, e o 4:1 são 4 algarismos, sendo 1 depois da virgula 
           Se (m[i] > MT) entao
           Tot <- Tot + 1	//total alunos acima da media
           FimSe
      FimPara
      EscrevaL("Ao todo temos ",Tot, " alunos acima da media da turma que é ",MT:4:1)  //4:1 é a formatação de 4 algarismos, sendo 1 decimal
fimalgoritmo


---------------------------------------------------------------------------


algoritmo "Só_com_C_importa "
// Função : Declarar somente nomes iniciados pela letra C
// Autor :  Guanabara
// Data : 11/06/2019
// Seção de Declarações 
var
   nome: Caractere
   soC: vetor[1..15] de Caractere    //vetor que guarda nomes só iniciado com C, o 15 é um limite qualquer
   c, tot: inteiro                   //contador, Total de nomes com C
inicio
      tot <-0
      Para c <- 1 ate 10 faca        // recebendo 10 nomes
           Escreva("Digite o nome: ")
           Leia(nome)
           Se (copia(maiusc(nome), 1, 1) = "C") entao // funções pré definidas pelo Visualg para encontrar a letra na posição 1 da variável nome
              tot <- tot + 1
              soC[tot] <- nome     // cumprido os requisistos das condicionais acima, o soC guarda a variavel nome (ambas são do tipo caractere)
           FimSe
      FimPara
      
      LimpaTela
      EscrevaL("LISTAGEM FINAL")
      Para c <- 1 ate tot faca      // até o total de nomes iniciados com C
           EscrevaL(soC[c])         // quando for vetor, lembrar de colocar a posição
      FimPara
fimalgoritmo


------------------------------------------------------------------------------------------------------------------------------------------


algoritmo "Ordena_Vetor"
// Função : Escrevendo 4 valores, o camando Para, com utilização
//          de vetores irá ordenar os nºs em ordem crescente
// Autor :  Guanabara
// Data : 13/06/2019
// Seção de Declarações 
var
    vet: vetor[1..4] de Inteiro
    i, j, aux: Inteiro       //2 posições e uma auxiliar para realizar a
    //                       troca de posição
inicio

      Para i <- 1 ate 4 faca      // na posição 'i'
           Escreva("Digite um valor: ")
           Leia(vet[i])		//utilizando comando escreva, daremos 4 valores a um vetor
      FimPara
      
      Para i <- 1 ate 3 faca       // criado para ordenar o vetor; pq 3 e não 4? ora! é -1, pq não pode ser ele com ele mesmo
           Para j <- i+1 ate 4 faca    //note i+1!      e o 'j' quando estoura, pode recomeçar
                Se vet[i] > vet[j] entao
                   aux <- vet[i]
                   vet[i]  <- vet[j]
                   vet[j] <- aux
                FimSe
           Fimpara
      FimPara
      
      Para i <- 1 ate 4 faca		//mais uma estrututra 'para', dessa vez para declarar o vetor 'vet'
           Escreva ("{",vet[i], " }")
      FimPara
fimalgoritmo


----------------------------------------------------------------------------------------------------


