-- MÓDULO SEGURANÇA
CREATE TABLE USUARIOS (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  NOME VARCHAR(100) NOT NULL,
  LOGIN VARCHAR(50) UNIQUE NOT NULL,
  SENHA_HASH VARCHAR(255) NOT NULL,
  EMAIL VARCHAR(100),
  ATIVO ATIVO CHAR(1) DEFAULT 'S' COMMENT 'S = Sim, N = Não',
  DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
  ULTIMO_ACESSO DATETIME NULL,
  OBSERVACOES VARCHAR(1000)
);

CREATE TABLE PERFIS (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  NOME VARCHAR(50) NOT NULL,
  DESCRICAO VARCHAR(255),
  NIVEL_ACESSO INT DEFAULT 1 COMMENT '1: menor privilégio; valores maiores indicam maior privilégio',
  ATIVO ATIVO CHAR(1) DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE USUARIOS_PERFIS (
    FK_USUARIO INT NOT NULL,
    FK_PERFIL INT NOT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (FK_USUARIO, FK_PERFIL)/*,
    FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS (ID),
    FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS (ID)*/
  );

CREATE TABLE APLICACOES (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  NOME VARCHAR(100) NOT NULL,
  DESCRICAO VARCHAR(255),
  ROTA VARCHAR(200) NULL COMMENT 'URL ou identificador da funcionalidade'
);

CREATE TABLE MODULOS (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  NOME VARCHAR(50) NOT NULL,
  DESCRICAO VARCHAR(255)
);

CREATE TABLE APLICACOES_MODULOS (
  FK_MODULO INT NOT NULL,
  FK_APLICACAO INT NOT NULL,
  PRIMARY KEY (FK_MODULO, FK_APLICACAO)/*,
  FOREIGN KEY (FK_MODULO) REFERENCES MODULOS(ID),
  FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID)*/
);

CREATE TABLE PERMISSOES (
	FK_PERFIL INT NOT NULL,
	FK_APLICACAO INT NOT NULL,
	ACESSAR CHAR(1) DEFAULT 'N' COMMENT 'S = Sim, N = Não',
	INSERIR CHAR(1) DEFAULT 'N',
	ATUALIZAR CHAR(1) DEFAULT 'N',
	EXCLUIR CHAR(1) DEFAULT 'N',
	EXPORTAR CHAR(1) DEFAULT 'N',
	IMPRIMIR CHAR(1) DEFAULT 'N', 
	PRIMARY KEY (FK_PERFIL, FK_APLICACAO)/*,
	FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS(ID),
	FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID)*/
) COMMENT='Permissões por perfil e aplicação.';

CREATE TABLE LOGS (
	id int(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	inserted_date datetime,
	username varchar(90) NOT NULL,
	application varchar(255) NOT NULL,
	action varchar(30) NOT NULL,
	description TEXT,
	creator varchar(30) NOT NULL,
	ip_user varchar(255) NOT NULL
)

CREATE TABLE USUARIOS_SESSOES (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  FK_USUARIO INT NOT NULL,
  TOKEN_HASH VARCHAR(255) NOT NULL,
  DATA_EXPIRACAO DATETIME NULL,
  DATA_LOGIN DATETIME DEFAULT CURRENT_TIMESTAMP,
  DATA_LOGOUT DATETIME COMMENT 'Se NULL, a sessão é considerada ativa',
  IP_ORIGEM VARCHAR(45),
  DISPOSITIVO VARCHAR(100) COMMENT '$_SERVER["HTTP_USER_AGENT"]: desktop, mobile, tablet, API, crawler (se for um robô)'/*,
  FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID)*/
);

CREATE TABLE USUARIOS_BLOQUEIOS (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  FK_USUARIO INT NOT NULL,
  MOTIVO VARCHAR(255) COMMENT 'Descrição detalhada do motivo do bloqueio',
  ORIGEM ENUM('Manual', 'Tentativas falhas', 'Sistema', 'Admin', 'Política de segurança') COMMENT 'Categoria do evento que gerou o bloqueio',
  DATA_BLOQUEIO DATETIME DEFAULT CURRENT_TIMESTAMP,
  DATA_EXPIRACAO DATETIME COMMENT 'Se NULL, o bloqueio é permanente',
  FK_BLOQUEADO_POR INT COMMENT 'ID do usuário que executou o bloqueio, se aplicável'/*,
  FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID),
  FOREIGN KEY (FK_BLOQUEADO_POR) REFERENCES USUARIOS(ID)*/
);

CREATE TABLE RECUPERACAO_SENHA (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  FK_USUARIO INT NOT NULL,
  TOKEN VARCHAR(255) NOT NULL,
  DATA_SOLICITACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
  DATA_UTILIZACAO DATETIME COMMENT 'Se NULL, o token ainda não foi utilizado',
  DATA_EXPIRACAO DATETIME COMMENT 'Após essa data, o token perde a validade',
  IP_ORIGEM VARCHAR(45)/*,
  FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID)*/
);

CREATE TABLE USUARIOS_TENTATIVAS_LOGIN (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  SUCESSO CHAR(1) NOT NULL COMMENT 'S = Sim, N = Não',
  FK_USUARIO INT COMMENT 'preenchido sempre que o sistema conseguir identificar o usuário pelo login digitado, independente do sucesso da senha',
  USERNAME_DIGITADO VARCHAR(100) NOT NULL,
  DATA_TENTATIVA DATETIME DEFAULT CURRENT_TIMESTAMP,
  IP_ORIGEM VARCHAR(45),
  DISPOSITIVO VARCHAR(100)/*,
  FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID)*/
);

-- MÓDULO CONFIGURAÇÕES
CREATE TABLE CONFIGURACOES (
    ID                  INT AUTO_INCREMENT PRIMARY KEY,
    CHAVE               VARCHAR(100) NOT NULL UNIQUE,
    VALOR               TEXT NOT NULL,
    DESCRICAO           VARCHAR(255),
    TIPO                VARCHAR(20) COMMENT 'Ex: STRING, INT, DECIMAL, BOOLEAN, DATA',
    AGRUPAMENTO         VARCHAR(50) COMMENT 'Ex: "FINANCEIRO", "GERAL", "ETIQUETAS"',
    AMBIENTE            ENUM('D','P') DEFAULT 'P' COMMENT 'D = Desenvolvimento, P = Produção',
    ATIVO 				      CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO        DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO    DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- MÓDULO PRODUTOS
CREATE TABLE PRODUTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(100) NOT NULL,
    FK_CATEGORIA INT NOT NULL,
    FK_FORNECEDOR INT NULL,
    CUSTO_AQUISICAO DECIMAL(10, 2) NULL,
    VALOR_ATUAL DECIMAL(10, 2) NULL COMMENT 'preço à vista',
    PRECIFICACAO_AUTOMATICA CHAR(1) DEFAULT 'N',
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CODIGO_BARRAS VARCHAR(20) UNIQUE /*,
    FOREIGN KEY (FK_CATEGORIA) REFERENCES PRODUTO_CATEGORIAS (ID),
    FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID)*/
  );
  
 CREATE TABLE PRODUTO_CATEGORIAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(100) NULL,
    TAXA_MARGEM_LUCRO DECIMAL(5, 2) NULL,
    TAXA_PARCELAMENTO DECIMAL(5, 2) NULL,
    TAXA_DESCONTO DECIMAL(5, 2) NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );
  
 CREATE TABLE ESTOQUES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRODUTO INT NOT NULL UNIQUE COMMENT 'um registro por produto',
    QUANTIDADE_ATUAL INT NOT NULL DEFAULT 0,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)
  );
  

CREATE TABLE ESTOQUE_ACOES_MOVIMENTACAO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ACAO VARCHAR(100) NOT NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
  );

CREATE TABLE ESTOQUE_ORIGENS_MOVIMENTACAO (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  ORIGEM VARCHAR(100) NOT NULL,
  ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);


CREATE TABLE ESTOQUE_MOVIMENTACOES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL,
    FK_ACAO INT NOT NULL COMMENT 'Ex: entrada, saída etc',
    FK_ORIGEM INT NULL COMMENT 'Ex: compra, venda, ajuste etc',
    ID_TRANSACAO_ORIGEM INT NULL COMMENT 'Identificador da transação que originou a movimentação (ex: ID da venda, ID da compra, ID do ajuste, ID da devolução etc).',
    DATA_MOVIMENTACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    OBSERVACOES VARCHAR(4000) NULL,
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID),
    FOREIGN KEY (FK_ACAO) REFERENCES ESTOQUE_ACOES_MOVIMENTACAO (ID),
    FOREIGN KEY (FK_ORIGEM) REFERENCES ESTOQUE_ORIGENS_MOVIMENTACAO (ID)
  );

-- MÓDULO VENDAS
CREATE TABLE VENDA_ORIGENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
  );

CREATE TABLE VENDA_SITUACOES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
  );

CREATE TABLE PRE_VENDA_SITUACOES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
  );

CREATE TABLE VENDAS (
    ID INT AUTO_INCREMENT PRIMARY KEY COMMENT 'chave candidata para número do pedido',
    FK_CLIENTE INT NOT NULL,
    FK_VENDEDOR INT NOT NULL,
    FK_ORIGEM INT NULL,
    FK_SITUACAO INT NOT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    DATA_VENDA DATETIME DEFAULT CURRENT_TIMESTAMP,
    OBSERVACOES VARCHAR(4000) NULL,
    FK_PRE_VENDA INT NULL/*,
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID),
    FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID)*/
  );

CREATE TABLE VENDA_ITENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_VENDA INT NOT NULL,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL,
    PRECO_ORIGINAL DECIMAL(10, 2) NULL COMMENT 'valor histórico (sem desconto). É PRODUTO.VALOR_ATUAL no momento da venda (sem desconto)',
    VALOR_DESCONTO DECIMAL(10, 2) NULL COMMENT 'por unidade, se houver',
    PRECO_UNITARIO_FINAL DECIMAL(10, 2) NOT NULL COMMENT 'após desconto',
    VALOR_TOTAL_ITENS DECIMAL(10, 2) GENERATED ALWAYS AS (QUANTIDADE * PRECO_UNITARIO_FINAL) STORED/*,
    FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID),
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)*/
  );

CREATE TABLE PRE_VENDAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_CLIENTE INT NOT NULL,
    FK_VENDEDOR INT NOT NULL,
    FK_ORIGEM INT NULL,
    FK_SITUACAO INT NOT NULL,
    DATA_RESERVA DATETIME NULL,
    DATA_DEVOLUCAO DATE NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    OBSERVACOES VARCHAR(4000) NULL/*,
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID),
    FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES PRE_VENDA_SITUACOES (ID)*/
  );

CREATE TABLE PRE_VENDA_ITENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRE_VENDA INT NOT NULL,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL CHECK (QUANTIDADE > 0),
    RESERVADO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    MOTIVO_LIBERACAO VARCHAR(255) NULL COMMENT 'Justificativa da liberação da reserva de um item. Preenchido somente quando RESERVADO = FALSE'/*,
    FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID),
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)*/
  );


-- MÓDULO FINANCEIRO
CREATE TABLE CREDITOS_RECEBER (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_VENDA INT NOT NULL,
    FK_CLIENTE INT NOT NULL,
    FK_SITUACAO INT NOT NULL,
    FK_FORMA_PREVISTA_PAGAMENTO INT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) DEFAULT 0,
    DATA_EMISSAO DATE NOT NULL,
    DATA_VENCIMENTO DATE NOT NULL,
    DATA_PAGAMENTO DATE NULL,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID),
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID)*/
  );

CREATE TABLE RECEBIMENTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_CREDITO_RECEBER INT NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) NOT NULL,
    DATA_PAGAMENTO DATE NOT NULL,
    FK_FORMA_PAGAMENTO INT NOT NULL,
    OBSERVACOES VARCHAR(4000) NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_CREDITO_RECEBER) REFERENCES CREDITOS_RECEBER (ID),
    FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID)*/
  );

CREATE TABLE OBRIGACOES_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_FORNECEDOR INT NOT NULL,
    FK_SITUACAO INT NOT NULL,
    FK_CATEGORIA_FINANCEIRA INT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) DEFAULT 0,
    DATA_EMISSAO DATE NOT NULL,
    DATA_VENCIMENTO DATE NOT NULL,
    DATA_PAGAMENTO DATE NULL,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_CATEGORIA_FINANCEIRA) REFERENCES CATEGORIAS_FINANCEIRAS (ID)*/
  );

CREATE TABLE PAGAMENTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_OBRIGACAO_FINANCEIRA INT NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) NOT NULL,
    DATA_PAGAMENTO DATE NOT NULL,
    FK_FORMA_PAGAMENTO INT NOT NULL,
    OBSERVACOES VARCHAR(4000) NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_OBRIGACAO_FINANCEIRA) REFERENCES OBRIGACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID)*/
  );

CREATE TABLE FORMAS_PAGAMENTO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL UNIQUE,
    ORDEM INT NOT NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
  );

CREATE TABLE SITUACOES_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NOT NULL,
    ORDEM INT NOT NULL,
    COR VARCHAR(100) NULL COMMENT 'Ex: #FF0000',
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
  );

CREATE TABLE NATUREZAS_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NULL,
    ORDEM INT NOT NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE CATEGORIAS_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NULL,
    FK_NATUREZA_FINANCEIRA INT NOT NULL,
    ORDEM INT NOT NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_NATUREZA_FINANCEIRA) REFERENCES NATUREZAS_FINANCEIRAS (ID)*/
  );

-- MÓDULO CADASTRO
CREATE TABLE CLIENTES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CPF VARCHAR(11) UNIQUE,
    CONTATO VARCHAR(50),
    EMAIL VARCHAR(100) UNIQUE,
    LIMITE_CREDIARIO DECIMAL(10, 2),
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE FORNECEDORES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CNPJ VARCHAR(14) UNIQUE,
    TIPO_PESSOA ENUM ('F', 'J') NOT NULL COMMENT 'F = Física, J = Jurídica',
    CONTATO VARCHAR(100),
    ENDERECO VARCHAR(500),
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE VENDEDORES (
    ID INT PRIMARY KEY COMMENT 'mesmo valor de USUARIOS.ID',
    APELIDO VARCHAR(50),
    PERCENTUAL_COMISSAO DECIMAL(5, 2),
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (ID) REFERENCES USUARIOS (ID)*/
  );

-- FOREIGN KEYS
ALTER TABLE USUARIOS_PERFIS ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS (ID);
ALTER TABLE USUARIOS_PERFIS ADD FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS (ID);

ALTER TABLE APLICACOES_MODULOS ADD FOREIGN KEY (FK_MODULO) REFERENCES MODULOS(ID);
ALTER TABLE APLICACOES_MODULOS ADD FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID);

ALTER TABLE PERMISSOES ADD FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS(ID);
ALTER TABLE PERMISSOES ADD FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID);

ALTER TABLE USUARIOS_SESSOES ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);

ALTER TABLE USUARIOS_BLOQUEIOS ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);
ALTER TABLE USUARIOS_BLOQUEIOS ADD FOREIGN KEY (FK_BLOQUEADO_POR) REFERENCES USUARIOS(ID);

ALTER TABLE RECUPERACAO_SENHA ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);

ALTER TABLE USUARIOS_TENTATIVAS_LOGIN ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);

ALTER TABLE PRODUTOS ADD FOREIGN KEY (FK_CATEGORIA) REFERENCES PRODUTO_CATEGORIAS (ID);
ALTER TABLE PRODUTOS ADD FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID);

ALTER TABLE VENDAS ADD FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_SITUACAO) REFERENCES VENDA_SITUACOES (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID);

ALTER TABLE VENDA_ITENS ADD FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID);
ALTER TABLE VENDA_ITENS ADD FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID);

ALTER TABLE PRE_VENDAS ADD FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE PRE_VENDAS ADD FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID);
ALTER TABLE PRE_VENDAS ADD FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID);
ALTER TABLE PRE_VENDAS ADD FOREIGN KEY (FK_SITUACAO) REFERENCES PRE_VENDA_SITUACOES (ID);

ALTER TABLE PRE_VENDA_ITENS ADD FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID);
ALTER TABLE PRE_VENDA_ITENS ADD FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID);

ALTER TABLE CREDITOS_RECEBER ADD FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID);
ALTER TABLE CREDITOS_RECEBER ADD FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE CREDITOS_RECEBER ADD FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID);
ALTER TABLE CREDITOS_RECEBER ADD FOREIGN KEY (FK_FORMA_PREVISTA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID);

ALTER TABLE RECEBIMENTOS ADD FOREIGN KEY (FK_CREDITO_RECEBER) REFERENCES CREDITOS_RECEBER (ID);
ALTER TABLE RECEBIMENTOS ADD FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID);

ALTER TABLE OBRIGACOES_FINANCEIRAS ADD FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID);
ALTER TABLE OBRIGACOES_FINANCEIRAS ADD FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID);
ALTER TABLE OBRIGACOES_FINANCEIRAS ADD FOREIGN KEY (FK_CATEGORIA_FINANCEIRA) REFERENCES CATEGORIAS_FINANCEIRAS (ID);

ALTER TABLE PAGAMENTOS ADD FOREIGN KEY (FK_OBRIGACAO_FINANCEIRA) REFERENCES OBRIGACOES_FINANCEIRAS (ID);
ALTER TABLE PAGAMENTOS ADD FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID);

ALTER TABLE CATEGORIAS_FINANCEIRAS ADD FOREIGN KEY (FK_NATUREZA_FINANCEIRA) REFERENCES NATUREZAS_FINANCEIRAS(ID);

ALTER TABLE VENDEDORES ADD FOREIGN KEY (ID) REFERENCES USUARIOS (ID);

/* Procedure de verificação e bloqueio: */
CREATE PROCEDURE SP_VERIFICA_BLOQUEIO_TENTATIVAS(IN P_ID_USUARIO INT)
BEGIN
  DECLARE V_FALHAS INT;

  SELECT COUNT(*) INTO V_FALHAS
  FROM USUARIOS_TENTATIVAS_LOGIN
  WHERE FK_USUARIO = P_ID_USUARIO
    AND SUCESSO = FALSE
    AND DATA_TENTATIVA >= (NOW() - INTERVAL 15 MINUTE);

  IF V_FALHAS >= 5 THEN
    INSERT INTO USUARIOS_BLOQUEIOS (
      FK_USUARIO,
      MOTIVO,
      DATA_BLOQUEIO,
      ORIGEM
    ) VALUES (
      P_ID_USUARIO,
      'BLOQUEIO AUTOMÁTICO POR EXCESSO DE TENTATIVAS FALHAS DE LOGIN',
      NOW(),
      'TENTATIVAS FALHAS'
    );
  END IF;
END;

/* Trigger AFTER INSERT na tabela USUARIOS_TENTATIVAS_LOGIN */
CREATE TRIGGER TRG_TENTATIVA_LOGIN_FALHA
AFTER INSERT ON USUARIOS_TENTATIVAS_LOGIN
FOR EACH ROW
BEGIN
  IF NEW.SUCESSO = FALSE AND NEW.FK_USUARIO IS NOT NULL THEN
    CALL SP_VERIFICA_BLOQUEIO_TENTATIVAS(NEW.FK_USUARIO);
  END IF;
END;

-- TRIGGERS de ordenação

CREATE TRIGGER TRG_ORDEM_FORMAS_PAGAMENTO BEFORE INSERT ON FORMAS_PAGAMENTO FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;

	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  FORMAS_PAGAMENTO;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

CREATE TRIGGER TRG_ORDEM_SITUACOES_FINANCEIRAS BEFORE INSERT ON SITUACOES_FINANCEIRAS FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;

	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  SITUACOES_FINANCEIRAS;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

CREATE TRIGGER TRG_ORDEM_NATUREZAS_FINANCEIRAS BEFORE INSERT ON NATUREZAS_FINANCEIRAS FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;
	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  NATUREZAS_FINANCEIRAS;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

CREATE TRIGGER TRG_ORDEM_CATEGORIAS_FINANCEIRAS BEFORE INSERT ON CATEGORIAS_FINANCEIRAS FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;
	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  CATEGORIAS_FINANCEIRAS;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

-- CHECK constraints
ALTER TABLE PRODUTO_CATEGORIAS 
ADD CONSTRAINT CHK_PC_TAXA_MARGEM_LUCRO CHECK (TAXA_MARGEM_LUCRO BETWEEN 0 AND 100),
ADD CONSTRAINT CHK_PC_TAXA_PARCELAMENTO CHECK (TAXA_PARCELAMENTO BETWEEN 0 AND 100),
ADD CONSTRAINT CHK_PC_TAXA_DESCONTO CHECK (TAXA_DESCONTO BETWEEN 0 AND 100);

ALTER TABLE VENDEDORES ADD CONSTRAINT CHK_VD_COMISSAO CHECK (PERCENTUAL_COMISSAO BETWEEN 0 AND 100);

ALTER TABLE CREDITOS_RECEBER ADD CONSTRAINT CHK_CR_VALOR_PAGO CHECK (VALOR_PAGO >= 0 AND VALOR_PAGO <= VALOR_TOTAL);

ALTER TABLE OBRIGACOES_FINANCEIRAS ADD CONSTRAINT CHK_OB_VALOR_PAGO CHECK (VALOR_PAGO >= 0 AND VALOR_PAGO <= VALOR_TOTAL);

-- Índices em FKs melhoram desempenho em JOINs
ALTER TABLE PRODUTOS 
ADD INDEX IDX_PRODUTOS_FK_CATEGORIA (FK_CATEGORIA),
ADD INDEX IDX_PRODUTOS_FK_FORNECEDOR (FK_FORNECEDOR);

ALTER TABLE ESTOQUES ADD INDEX IDX_ESTOQUES_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE ESTOQUE_MOVIMENTACOES 
ADD INDEX IDX_EM_PRODUTO (FK_PRODUTO),
ADD INDEX IDX_EM_ACAO (FK_ACAO),
ADD INDEX IDX_EM_ORIGEM (FK_ORIGEM);

ALTER TABLE VENDAS 
ADD INDEX IDX_VENDAS_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_VENDAS_FK_VENDEDOR (FK_VENDEDOR),
ADD INDEX IDX_VENDAS_FK_SITUACAO (FK_SITUACAO);

ALTER TABLE VENDA_ITENS 
ADD INDEX IDX_VI_FK_VENDA (FK_VENDA),
ADD INDEX IDX_VI_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE PRE_VENDAS 
ADD INDEX IDX_PV_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_PV_FK_VENDEDOR (FK_VENDEDOR),
ADD INDEX IDX_PV_FK_SITUACAO (FK_SITUACAO);

ALTER TABLE PRE_VENDA_ITENS 
ADD INDEX IDX_PVI_FK_PRE_VENDA (FK_PRE_VENDA),
ADD INDEX IDX_PVI_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE CREDITOS_RECEBER 
ADD INDEX IDX_CR_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_CR_FK_SITUACAO (FK_SITUACAO),
ADD INDEX IDX_CR_FK_FORMA_PREVISTA_PAGAMENTO (FK_FORMA_PREVISTA_PAGAMENTO);

ALTER TABLE RECEBIMENTOS 
ADD INDEX IDX_REC_FK_CREDITO (FK_CREDITO_RECEBER),
ADD INDEX IDX_REC_FK_FORMA_PGTO (FK_FORMA_PAGAMENTO);

ALTER TABLE OBRIGACOES_FINANCEIRAS 
ADD INDEX IDX_OB_FK_FORNECEDOR (FK_FORNECEDOR),
ADD INDEX IDX_OB_FK_SITUACAO (FK_SITUACAO),
ADD INDEX IDX_OB_FK_CATEG_FINANCEIRA (FK_CATEGORIA_FINANCEIRA);

ALTER TABLE PAGAMENTOS 
ADD INDEX IDX_PG_FK_OBRIGACAO (FK_OBRIGACAO_FINANCEIRA),
ADD INDEX IDX_PG_FK_FORMA_PGTO (FK_FORMA_PAGAMENTO);

ALTER TABLE CATEGORIAS_FINANCEIRAS 
ADD INDEX IDX_CATF_FK_NATUREZA (FK_NATUREZA_FINANCEIRA);

ALTER TABLE LOGS  
ADD INDEX IDX_LOGS_USERNAME (username), 
ADD INDEX IDX_LOGS_APPLICATION (application), 
ADD INDEX IDX_LOGS_ACTION (action), 
ADD INDEX IDX_LOGS_INSERTED_DATE (inserted_date);

ALTER TABLE USUARIOS_SESSOES 
ADD INDEX IDX_SESSAO_USUARIO (FK_USUARIO), 
ADD INDEX IDX_SESSAO_TOKEN (TOKEN_HASH);

ALTER TABLE USUARIOS_BLOQUEIOS 
ADD INDEX IDX_BLOQUEIO_USUARIO (FK_USUARIO);

ALTER TABLE RECUPERACAO_SENHA 
ADD UNIQUE INDEX IDX_RECUP_SENHA_TOKEN (TOKEN), 
ADD INDEX IDX_RECUP_SENHA_USUARIO (FK_USUARIO);

ALTER TABLE USUARIOS_TENTATIVAS_LOGIN 
ADD INDEX IDX_TENTATIVA_USUARIO (FK_USUARIO),
ADD INDEX IDX_TENTATIVA_DATA (DATA_TENTATIVA),
ADD INDEX IDX_TENTATIVA_SUCESSO (SUCESSO);

-- SEEDs (dados sugeridos)
INSERT INTO ESTOQUE_ACOES_MOVIMENTACAO (ACAO) VALUES
('ENTRADA'),
('SAÍDA'),
('DEVOLUÇÃO'),
('AJUSTE');

INSERT INTO ESTOQUE_ORIGENS_MOVIMENTACAO (ORIGEM) VALUES
('VENDA'),
('COMPRA'),
('PRÉ-VENDA'),
('DEVOLUÇÃO'),
('CORRECAO');
  
INSERT INTO VENDA_ORIGENS (DESCRICAO) VALUES
('VENDA DIRETA (BALCÃO)'),
('PRÉ-VENDA CONVERTIDA'),
('VENDA ONLINE'),
('VENDA POR TELEFONE'),
('VENDA EXTERNA (REPRESENTANTE)'),
('VENDA MANUAL/LIVRE');

INSERT INTO VENDA_SITUACOES (DESCRICAO) VALUES
('EM ABERTO'),
('FINALIZADA'),
('CANCELADA'),
('PAGAMENTO PENDENTE');

INSERT INTO PRE_VENDA_SITUACOES (DESCRICAO) VALUES
('RESERVADA'),
('FINALIZADA'),
('CANCELADA'),
('DEVOLVIDA PARCIALMENTE');

INSERT INTO FORMAS_PAGAMENTO (NOME) VALUES
('DINHEIRO'),
('PIX'),
('CREDIÁRIO'),
('CARTÃO'),
('BOLETO'),
('DOAÇÃO');

INSERT INTO SITUACOES_FINANCEIRAS (NOME, DESCRICAO, COR) VALUES
('ABERTA','Conta aberta aguardando pagamento','#CCCCCC'),
('PAGA', 'Conta quitada', '#00CC00'),
('ATRASADA', 'Pagamento em atraso', '#FF0000'),
('PARCIALMENTE PAGA','Conta parcialmente quitada','#FF9900'),
('NEGOCIADA','Conta renegociada com novo vencimento','#0066CC'),
('CANCELADA','Conta cancelada por erro ou devolução','#999999'),
('ISENTA','Conta isenta de cobrança','#0099CC'),
('EM DISPUTA','Conta em análise ou contestação','#CC0066'),
('ANTECIPADA','Conta paga antes do vencimento','#006600');

INSERT INTO NATUREZAS_FINANCEIRAS (NOME, DESCRICAO) VALUES
('RECEITA', 'Entrada de valores'),
('DESPESA', 'Saída de valores'),
('TRANSFERENCIA','Transferência entre contas ou caixas'),
('ESTORNO', 'Reversão de receita ou despesa'),
('INVESTIMENTO','Aplicações financeiras ou aquisição de ativos'),
('EMPRESTIMO', 'Valores recebidos de terceiros'),
('PAGAMENTO','Quitação de obrigação financeira'),
('DEVOLUCAO','Estorno por devolução de produto ou serviço'),
('AJUSTE','Correções ou ajustes contábeis manuais');

INSERT INTO CATEGORIAS_FINANCEIRAS (NOME, DESCRICAO, FK_NATUREZA_FINANCEIRA) VALUES
('CREDIÁRIO LOJA FÍSICA','Venda parcelada no crediário interno',1),
('CARTÃO DE CRÉDITO','Venda parcelada via operadora',1),
('PIX IMEDIATO', 'Recebimento à vista via PIX', 1),
('BOLETO BANCÁRIO','Recebimento programado via boleto',1),
('VENDA ONLINE','Receita gerada por e-commerce',1),
('DISTRIBUIDOR',  'Vendas para distribuidores',1),
('REPRESENTANTE','Vendas via representante comercial',1),
('SERVICOS',     'Receita de serviços prestados',1);
('FORNECEDOR ESTOQUE','Compra de produtos para revenda',2),
('DESPESA FIXA - ALUGUEL','Pagamento mensal do ponto físico',2),
('CAMPANHA MARKETING','Investimento em divulgação',5);

INSERT INTO PERFIS (NOME, DESCRICAO, NIVEL_ACESSO) VALUES
('Administrador',        'Acesso total ao sistema',          99),
('Operador Financeiro',  'Acesso restrito ao financeiro',    50),
('Caixa',                'Operações de venda e caixa',       20),
('Vendedor',             'Registro de vendas e consultas',   10);

-- ⚙️ Configurações Gerais
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('NOME_EMPRESA', 'Val Mendes Modas', 'Nome comercial da empresa para exibição nos relatórios e etiquetas', 'STRING', 'GERAL'),
('EMAIL_EMPRESA', 'contato@valmendesmodas.com.br', 'E-mail padrão para contato e envio de cobranças', 'STRING', 'GERAL'),
('TELEFONE_EMPRESA', '(19) 99999-0000', 'Telefone de contato exibido em documentos', 'STRING', 'GERAL'),
('CNPJ_EMPRESA', '12.345.678/0001-90', 'CNPJ da empresa para relatórios e contratos', 'STRING', 'GERAL'),
('FUSO_HORARIO', 'America/Sao_Paulo', 'Fuso horário do sistema', 'STRING', 'GERAL'),
('IDIOMA_PADRAO', 'pt_BR', 'Idioma padrão do sistema', 'STRING', 'GERAL');
-- 💸 Financeiro
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('PERCENTUAL_LUCRO_PADRAO', '30', 'Lucro percentual padrão aplicado ao preço de custo', 'DECIMAL', 'FINANCEIRO'),
('VENCIMENTO_CREDIARIO_PADRAO', '30', 'Número de dias padrão para vencimento de vendas a prazo (crediário)', 'INT', 'FINANCEIRO'),
('AVISO_INADIMPLENCIA_DIAS', '5', 'Dias antes ou após vencimento para envio de mensagem de inadimplência', 'INT', 'FINANCEIRO'),
('EXIBIR_FLUXO_CAIXA_INICIAL', 'S', 'Exibir fluxo de caixa na tela inicial do sistema', 'BOOLEAN', 'FINANCEIRO'),
('FORMA_PAGAMENTO_PADRAO', 'Dinheiro', 'Forma de pagamento sugerida nas vendas à vista', 'STRING', 'FINANCEIRO');
-- 🧾 Etiquetas e Impressão
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('ETIQUETA_LARGURA_CM', '5.0', 'Largura da etiqueta padrão em centímetros', 'DECIMAL', 'ETIQUETAS'),
('ETIQUETA_ALTURA_CM', '3.0', 'Altura da etiqueta padrão em centímetros', 'DECIMAL', 'ETIQUETAS'),
('ETIQUETA_MODELO_PADRAO', 'modelo1', 'Modelo de layout de etiqueta padrão', 'STRING', 'ETIQUETAS'),
('IMPRIMIR_PRECO_ETIQUETA', 'S', 'Se deve imprimir o preço de venda na etiqueta', 'BOOLEAN', 'ETIQUETAS'),
('IMPRIMIR_LOGO_ETIQUETA', 'S', 'Se deve imprimir a logo da empresa na etiqueta', 'BOOLEAN', 'ETIQUETAS');
-- 📩 Mensagens
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('MENSAGEM_COBRANCA_PADRAO', 'Olá, tudo bem? Verificamos que há um pagamento em aberto. Por favor, entre em contato para regularizar. Loja Val Mendes Modas', 'Mensagem de cobrança enviada por WhatsApp', 'STRING', 'MENSAGENS'),
('MENSAGEM_AGRADECIMENTO_VENDA', 'Obrigado por comprar conosco! Esperamos te ver em breve', 'Mensagem de agradecimento automática após venda', 'STRING', 'MENSAGENS');
-- 🛒 Vendas
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('HABILITAR_PRE_VENDA', 'S', 'Permitir operação de pré-venda no sistema', 'BOOLEAN', 'VENDAS'),
('PERMITIR_DESCONTO_LIVRE', 'false', 'Permitir inserir descontos livres no momento da venda', 'BOOLEAN', 'VENDAS'),
('DESCONTO_MAXIMO_AUTORIZADO', '15', 'Desconto percentual máximo sem autorização gerencial', 'DECIMAL', 'VENDAS'),
('GERAR_PEDIDO_AUTOMATICO', 'S', 'Gerar pedido automaticamente após finalização de venda', 'BOOLEAN', 'VENDAS');
-- 📈 Relatórios
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('GRAFICO_METRICA_PADRAO', 'vendas_diarias', 'Tipo de métrica padrão exibida no gráfico da dashboard', 'STRING', 'RELATORIOS'),
('EXIBIR_TOP_CLIENTES', 'S', 'Exibir ranking de clientes que mais compraram na dashboard', 'BOOLEAN', 'RELATORIOS');
-- 🔐 Segurança / Sistema
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('SESSION_COOKIE_NAME', 'minhaloja_session', 'Nome do cookie usado para armazenar a sessão', 'STRING', 'SEGURANCA'),
('SESSION_LIFETIME_CLIENT', '14400', 'Controla quanto tempo o navegador do usuário mantém o cookie de sessão', 'INT', 'SEGURANCA'),
('SESSION_LIFETIME_SERVER', '14400', 'Define por quanto tempo a sessão será válida no banco de dados', 'INT', 'SEGURANCA'),
('FORCE_STRONG_PASSWORD', 'S', 'Obrigar uso de senha forte para usuários do sistema', 'BOOLEAN', 'SEGURANCA'),
('PASSWORD_MIN_LENGTH', '8', 'Quantidade mínima de caracteres exigidos para senha', 'INT', 'SEGURANCA'),
('PASSWORD_EXPIRE_DAYS', '90', 'Número de dias antes da senha expirar', 'INT', 'SEGURANCA'),
('MAX_LOGIN_ATTEMPTS', '5', 'Número máximo de tentativas de login antes de bloqueio', 'INT', 'SEGURANCA'),
('LOGIN_BLOCK_TIME', '15', 'Tempo de bloqueio após tentativas falhas de login (em minutos)', 'INT', 'SEGURANCA');


-- Criar usuário Admin
INSERT INTO USUARIOS (NOME, LOGIN, SENHA_HASH, EMAIL)
VALUES ('Admin Sistema', 'admin', SHA2('admin123', 256), 'admin@empresa.com.br');
SET @ID_ADMIN := LAST_INSERT_ID();

INSERT INTO LOGS (username, application, action, description, ip_user, creator)
VALUES (
  'admin',
  'Sistema',
  'CRIAÇÃO',
  'Usuário administrador criado e perfil vinculado',
  '127.0.0.1',
  'test simulator'
);

-- Associação Usuário x Perfil
INSERT INTO USUARIOS_PERFIS (FK_USUARIO, FK_PERFIL)
VALUES (
  @ID_ADMIN,
  (SELECT ID FROM PERFIS WHERE NOME = 'Administrador')
);

-- Módulos
INSERT INTO MODULOS (NOME, DESCRICAO) VALUES
  ('Financeiro', 'Controle de fluxo de caixa, contas a pagar e receber'),
  ('Estoque',    'Gestão de entradas, saídas e inventário'),
  ('Vendas',     'Operações de vendas e pré-vendas'),
  ('Cadastro',   'Manutenção de cadastros mestres');

-- Aplicações / Telas
INSERT INTO APLICACOES (NOME, ROTA, DESCRICAO) VALUES
  ('Fluxo de Caixa',       '/financeiro/fluxo-caixa',       'Visão do caixa diário e mensal'),
  ('Contas a Pagar',       '/financeiro/contas-pagar',      'Listagem e gestão de contas a pagar'),
  ('Estoque Movimentações','/estoque/movimentacoes',        'Registro de entradas e saídas'),
  ('Cadastro de Clientes', '/cadastro/clientes',            'CRUD de clientes'),
  ('Cadastro de Produtos', '/cadastro/produtos',            'CRUD de produtos'),
  ('Registro de Venda',    '/vendas/novo',                  'Formulário de nova venda'),
  ('Listagem de Vendas',   '/vendas/lista',                 'Consulta de vendas realizadas');

-- Relacionamento entre Aplicações e Módulos
INSERT INTO APLICACOES_MODULOS (FK_MODULO, FK_APLICACAO)
SELECT M.ID, A.ID
FROM MODULOS M
JOIN APLICACOES A ON
  (M.NOME = 'Financeiro' AND A.NOME IN ('Fluxo de Caixa', 'Contas a Pagar'))
  OR
  (M.NOME = 'Estoque'    AND A.NOME = 'Estoque Movimentações')
  OR
  (M.NOME = 'Cadastro'   AND A.NOME IN ('Cadastro de Clientes', 'Cadastro de Produtos'))
  OR
  (M.NOME = 'Vendas'     AND A.NOME IN ('Registro de Venda', 'Listagem de Vendas'));

-- ====================================================
-- ===================== TESTES =======================
-- Simulação de Venda entre Vendedor e Cliente, a prazo

INSERT INTO PERMISSOES (
  FK_PERFIL, FK_APLICACAO,
  ACESSAR, INSERIR, ATUALIZAR, EXCLUIR, EXPORTAR, IMPRIMIR
)
SELECT
    P.ID, A.ID, S, S, S, S, S, S
FROM 
    PERFIS P
    CROSS JOIN APLICACOES A
WHERE 
    P.NOME = 'Administrador';

-- Cliente
INSERT INTO CLIENTES (NOME, CPF, CONTATO, LIMITE_CREDIARIO)
VALUES ('Maria da Silva', '12345678901', '19991234567', 1000.00);
SET @ID_CLIENTE = LAST_INSERT_ID();

-- Usuário vendedor
INSERT INTO USUARIOS (NOME, LOGIN, EMAIL, SENHA_HASH)
VALUES ('Carlos Vendedor', 'carlos', 'carlos@loja.com', SHA2('senha123', 256));
SET @ID_USUARIO = LAST_INSERT_ID();

-- Perfil vendedor (caso não exista ainda)
/*INSERT IGNORE INTO PERFIS (NOME, DESCRICAO, NIVEL_ACESSO)
VALUES ('Vendedor', 'Permite realizar vendas', 10);*/
SET @ID_PERFIL = (SELECT ID FROM PERFIS WHERE NOME = 'Vendedor');

-- Associação com o perfil
INSERT INTO USUARIOS_PERFIS (FK_USUARIO, FK_PERFIL)
VALUES (@ID_USUARIO, @ID_PERFIL);

-- Vendedor (ID igual ao usuário)
INSERT INTO VENDEDORES (ID, APELIDO, PERCENTUAL_COMISSAO)
VALUES (@ID_USUARIO, 'Carlos', 5.0);


-- ====================================================
-- 1. Cadastrar PRODUTOS
-- ====================================================
INSERT INTO FORNECEDORES (NOME, CNPJ, TIPO_PESSOA, CONTATO, ENDERECO, ATIVO, OBSERVACOES) VALUES
    ('Tecno Vest LTDA', '12345678000195', 'J', 'Marcos Silva - (11) 98888-1111', 
 'Rua das Indústrias, 120 - Centro - São Paulo/SP', 1, 'Fornecedor principal de tecidos e aviamentos'),
    ('Estilo & Moda Confecções', '22345678000188', 'J', 'Fernanda Alves - (11) 97777-2222', 
 'Av. Fashion, 450 - Brás - São Paulo/SP', 1, 'Entrega rápida e preços competitivos'),
    ('Carlos Henrique Souza', '12345678901', 'F', 'Carlos H. Souza - (11) 96666-3333', 
 'Rua João Pedro, 58 - Santo Amaro - São Paulo/SP', 1, 'Fornecedor de peças exclusivas sob encomenda'),
    ('Global Têxtil Importadora', '32345678000177', 'J', 'Ricardo Moura - (21) 95555-4444', 
 'Av. Atlântica, 999 - Copacabana - Rio de Janeiro/RJ', 1, 'Fornecedor internacional de tecidos finos'),
    ('Maria Eduarda Lima', '98765432100', 'F', 'Maria E. Lima - (31) 94444-5555', 
 'Rua das Flores, 321 - Centro - Belo Horizonte/MG', 0, 'Fornecedor eventual; atualmente inativo');
 
INSERT INTO PRODUTO_CATEGORIAS (NOME, DESCRICAO, TAXA_MARGEM_LUCRO, TAXA_PARCELAMENTO, TAXA_DESCONTO) VALUES 
    ('Roupas Masculinas', 'Camisas, calças, bermudas e acessórios masculinos.', 40, 10, 5),
    ('Roupas Femininas', 'Vestidos, saias, blusas e acessórios femininos.', 45, 12, 8),
    ('Calçados', 'Tênis, sapatos, sandálias e chinelos.', 35, 8, 5),
    ('Acessórios', 'Bolsas, carteiras, cintos, bonés e outros.', 50, 15, 10),
    ('Moda Infantil', 'Roupas e calçados para crianças.', 38, 10, 7),
    ('Esporte e Lazer', 'Roupas esportivas, chuteiras, bolas e equipamentos.', 42, 12, 6);

INSERT INTO PRODUTOS (DESCRICAO,FK_CATEGORIA,FK_FORNECEDOR,CUSTO_AQUISICAO,VALOR_ATUAL,PRECIFICACAO_AUTOMATICA,ATIVO,CODIGO_BARRAS) VALUES(
    'Camisa Polo',
    1,
    1,
    50.00,
    120.00,
    'N',
    S,
    'CP001'
  ),
  (
    'Calça Jeans',
    1,
    3,
    70.00,
    80.00,
    'N',
    S,
    'CJ001'
  );

-- ====================================================
-- 2. Criar uma venda
-- ====================================================
INSERT INTO VENDAS (
  FK_CLIENTE,
  FK_VENDEDOR,
  FK_ORIGEM,
  FK_SITUACAO,
  VALOR_TOTAL,
  DATA_VENDA
)
VALUES (
  @ID_CLIENTE,
  @ID_USUARIO,
  1,
  2,
  200.00,
  NOW()
);
SET @ID_VENDA := LAST_INSERT_ID();

-- ====================================================
-- 3. Inserir itens da venda
-- ====================================================
INSERT INTO VENDA_ITENS (
  FK_VENDA,
  FK_PRODUTO,
  QUANTIDADE,
  PRECO_ORIGINAL,
  VALOR_DESCONTO,
  PRECO_UNITARIO_FINAL
)
VALUES
  (
    @ID_VENDA,
    1/*'Camisa Polo'*/, 
    1,
    120.00,
    0.00,
    120.00
  ),
  (
    @ID_VENDA,
    2/*'Calça Jeans'*/,
    1,
    80.00,
    0.00,
    80.00
  );

-- ====================================================
-- 4. Movimentação de estoque (saída de produtos vendidos)
-- ====================================================
INSERT INTO ESTOQUE_MOVIMENTACOES (FK_PRODUTO,QUANTIDADE,FK_ACAO,FK_ORIGEM,ID_TRANSACAO_ORIGEM,DATA_MOVIMENTACAO)
SELECT
  FK_PRODUTO,
  -QUANTIDADE/*negativo = saída*/,
  2/*SAIDA*/,
  1/*VENDA*/,
  @ID_VENDA,
  NOW()
FROM VENDA_ITENS
WHERE FK_VENDA = @ID_VENDA;

-- ====================================================
-- 5. Gerar creditos a receber em 2 parcelas (crediário)
-- ====================================================
INSERT INTO CREDITOS_RECEBER (
  FK_CLIENTE,
  FK_VENDA,
  FK_SITUACAO,
  FK_FORMA_PREVISTA_PAGAMENTO,
  VALOR_TOTAL,
  DATA_EMISSAO,
  DATA_VENCIMENTO
)
VALUES
  (
    @ID_CLIENTE,
    @ID_VENDA,
    1/*ABERTA*/,
    3/*CREDIÁRIO*/,
    100.00,
    CURDATE(),
    DATE_ADD(CURDATE(), INTERVAL 30 DAY)
  ),
  (
    @ID_CLIENTE,
    @ID_VENDA,
    1/*ABERTA*/,
    3/*CREDIÁRIO*/,
    100.00,
    CURDATE(),
    DATE_ADD(CURDATE(), INTERVAL 60 DAY)
  );