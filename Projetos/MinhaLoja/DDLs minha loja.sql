-- MÓDULO SEGURANÇA
CREATE TABLE USUARIOS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	LOGIN VARCHAR(50) UNIQUE NOT NULL,
	SENHA_HASH VARCHAR(255) NOT NULL,
	EMAIL VARCHAR(100),
	ATIVO ATIVO CHAR(1) DEFAULT 'S' COMMENT 'S = Sim, N = Não',
	DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
	ULTIMO_ACESSO DATETIME NULL,
	OBSERVACOES VARCHAR(1000)
);

CREATE TABLE PERFIS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	DESCRICAO VARCHAR(255),
	NIVEL_ACESSO INT DEFAULT 1 COMMENT '1: menor privilégio; valores maiores indicam maior privilégio',
	ATIVO ATIVO CHAR(1) DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE USUARIOS_PERFIS (
	FK_USUARIO INT NOT NULL,
	FK_PERFIL INT NOT NULL,
	DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (FK_USUARIO, FK_PERFIL)/*,
	FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS (ID),
	FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS (ID)*/
);

CREATE TABLE APLICACOES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	DESCRICAO VARCHAR(255),
	ROTA VARCHAR(200) NULL COMMENT 'URL ou identificador da funcionalidade'
);

CREATE TABLE MODULOS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	DESCRICAO VARCHAR(255)
);

CREATE TABLE APLICACOES_MODULOS (
	FK_MODULO INT NOT NULL,
	FK_APLICACAO INT NOT NULL,
	PRIMARY KEY (FK_MODULO, FK_APLICACAO)/*,
	FOREIGN KEY (FK_MODULO) REFERENCES MODULOS(ID),
	FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID)*/
);

CREATE TABLE PERMISSOES (
	FK_PERFIL INT NOT NULL,
	FK_APLICACAO INT NOT NULL,
	ACESSAR CHAR(1) DEFAULT 'N' COMMENT 'S = Sim, N = Não',
	INSERIR CHAR(1) DEFAULT 'N',
	ATUALIZAR CHAR(1) DEFAULT 'N',
	EXCLUIR CHAR(1) DEFAULT 'N',
	EXPORTAR CHAR(1) DEFAULT 'N',
	IMPRIMIR CHAR(1) DEFAULT 'N', 
	PRIMARY KEY (FK_PERFIL, FK_APLICACAO)/*,
	FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS(ID),
	FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID)*/
) COMMENT='Permissões por perfil e aplicação.';

CREATE TABLE LOGS (
	id int(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	inserted_date datetime,
	username varchar(90) NOT NULL,
	application varchar(255) NOT NULL,
	action varchar(30) NOT NULL,
	description TEXT,
	creator varchar(30) NOT NULL,
	ip_user varchar(255) NOT NULL
);

CREATE TABLE USUARIOS_SESSOES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FK_USUARIO INT NOT NULL,
	TOKEN_HASH VARCHAR(255) NOT NULL,
	DATA_EXPIRACAO DATETIME NULL,
	DATA_LOGIN DATETIME DEFAULT CURRENT_TIMESTAMP,
	DATA_LOGOUT DATETIME COMMENT 'Se NULL, a sessão é considerada ativa',
	IP_ORIGEM VARCHAR(45),
	DISPOSITIVO VARCHAR(100) COMMENT '$_SERVER["HTTP_USER_AGENT"]: desktop, mobile, tablet, API, crawler (se for um robô)'/*,
	FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID)*/
);

CREATE TABLE USUARIOS_BLOQUEIOS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FK_USUARIO INT NOT NULL,
	MOTIVO VARCHAR(255) COMMENT 'Descrição detalhada do motivo do bloqueio',
	ORIGEM ENUM('Manual', 'Tentativas falhas', 'Sistema', 'Admin', 'Política de segurança') COMMENT 'Categoria do evento que gerou o bloqueio',
	DATA_BLOQUEIO DATETIME DEFAULT CURRENT_TIMESTAMP,
	DATA_EXPIRACAO DATETIME COMMENT 'Se NULL, o bloqueio é permanente',
	FK_BLOQUEADO_POR INT COMMENT 'ID do usuário que executou o bloqueio, se aplicável'/*,
	FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID),
	FOREIGN KEY (FK_BLOQUEADO_POR) REFERENCES USUARIOS(ID)*/
);

CREATE TABLE RECUPERACAO_SENHA (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FK_USUARIO INT NOT NULL,
	TOKEN VARCHAR(255) NOT NULL,
	DATA_SOLICITACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
	DATA_UTILIZACAO DATETIME COMMENT 'Se NULL, o token ainda não foi utilizado',
	DATA_EXPIRACAO DATETIME COMMENT 'Após essa data, o token perde a validade',
	IP_ORIGEM VARCHAR(45)/*,
	FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID)*/
);

CREATE TABLE USUARIOS_TENTATIVAS_LOGIN (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	SUCESSO CHAR(1) NOT NULL COMMENT 'S = Sim, N = Não',
	FK_USUARIO INT COMMENT 'preenchido sempre que o sistema conseguir identificar o usuário pelo login digitado, independente do sucesso da senha',
	USERNAME_DIGITADO VARCHAR(100) NOT NULL,
	DATA_TENTATIVA DATETIME DEFAULT CURRENT_TIMESTAMP,
	IP_ORIGEM VARCHAR(45),
	DISPOSITIVO VARCHAR(100)/*,
	FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID)*/
);

-- MÓDULO CONFIGURAÇÕES
CREATE TABLE CONFIGURACOES (
    ID                  INT AUTO_INCREMENT PRIMARY KEY,
    CHAVE               VARCHAR(100) NOT NULL UNIQUE,
    VALOR               TEXT NOT NULL,
    DESCRICAO           VARCHAR(255),
    TIPO                VARCHAR(20) COMMENT 'Ex: STRING, INT, DECIMAL, BOOLEAN, DATA',
    AGRUPAMENTO         VARCHAR(50) COMMENT 'Ex: "FINANCEIRO", "GERAL", "ETIQUETAS"',
    AMBIENTE            ENUM('D','P') DEFAULT 'P' COMMENT 'D = Desenvolvimento, P = Produção',
    ATIVO 				      CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO        DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO    DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- MÓDULO CADASTRO
CREATE TABLE CLIENTES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CPF VARCHAR(11) UNIQUE,
    CONTATO VARCHAR(50),
    EMAIL VARCHAR(100) UNIQUE,
    LIMITE_CREDIARIO DECIMAL(10, 2),
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE FORNECEDORES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CNPJ VARCHAR(14) UNIQUE,
    TIPO_PESSOA ENUM ('F', 'J') NOT NULL COMMENT 'F = Física, J = Jurídica',
    CONTATO VARCHAR(100),
    ENDERECO VARCHAR(500),
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE VENDEDORES (
    ID INT PRIMARY KEY COMMENT 'mesmo valor de USUARIOS.ID',
    APELIDO VARCHAR(50),
    PERCENTUAL_COMISSAO DECIMAL(5, 2),
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (ID) REFERENCES USUARIOS (ID)*/
);

-- MÓDULO PRODUTOS
CREATE TABLE PRODUTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(100) NOT NULL,
    FK_CATEGORIA INT NOT NULL,
    FK_FORNECEDOR INT NULL,
    CUSTO_AQUISICAO DECIMAL(10, 2) NULL,
    VALOR_ATUAL DECIMAL(10, 2) NULL COMMENT 'preço à vista',
    PRECIFICACAO_AUTOMATICA CHAR(1) DEFAULT 'N',
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CODIGO_BARRAS VARCHAR(20) UNIQUE /*,
    FOREIGN KEY (FK_CATEGORIA) REFERENCES PRODUTO_CATEGORIAS (ID),
    FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID)*/
);
  
 CREATE TABLE PRODUTO_CATEGORIAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(100) NULL,
    TAXA_MARGEM_LUCRO DECIMAL(5, 2) NULL,
    TAXA_PARCELAMENTO DECIMAL(5, 2) NULL,
    TAXA_DESCONTO DECIMAL(5, 2) NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
  
 CREATE TABLE ESTOQUES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRODUTO INT NOT NULL UNIQUE COMMENT 'um registro por produto',
    QUANTIDADE_ATUAL INT NOT NULL DEFAULT 0,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
	FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)*/
);

CREATE TABLE ESTOQUE_MOVIMENTACOES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FK_PRODUTO INT NOT NULL,
	QUANTIDADE INT NOT NULL,
	FK_ACAO INT NOT NULL COMMENT 'Ex: entrada, saída etc',
	FK_ORIGEM INT NULL COMMENT 'Ex: compra, venda, ajuste etc',
	ID_TRANSACAO_ORIGEM INT NULL COMMENT 'Identificador da transação que originou a movimentação (ex: ID da venda, ID da compra, ID do ajuste, ID da devolução etc).',
	DATA_MOVIMENTACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
	OBSERVACOES VARCHAR(4000) NULL/*,
	FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID),
	FOREIGN KEY (FK_ACAO) REFERENCES ESTOQUE_ACOES_MOVIMENTACAO (ID),
	FOREIGN KEY (FK_ORIGEM) REFERENCES ESTOQUE_ORIGENS_MOVIMENTACAO (ID)*/
);

CREATE TABLE ESTOQUE_ACOES_MOVIMENTACAO (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	ACAO VARCHAR(100) NOT NULL,
	ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE ESTOQUE_ORIGENS_MOVIMENTACAO (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	ORIGEM VARCHAR(100) NOT NULL,
	ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

-- MÓDULO VENDAS
CREATE TABLE VENDA_ORIGENS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
	ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE VENDA_SITUACOES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
	ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE PRE_VENDA_SITUACOES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
	ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE PRE_VENDAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_CLIENTE INT NOT NULL,
    FK_VENDEDOR INT NOT NULL,
    FK_SITUACAO INT NOT NULL,
    DATA_EXPIRACAO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    DATA_CRIACAO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    OBSERVACOES VARCHAR(4000) NULL/*,
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES PRE_VENDA_SITUACOES (ID)*/
);

CREATE TABLE PRE_VENDA_ITENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRE_VENDA INT NOT NULL,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL CHECK (QUANTIDADE > 0),
    RESERVADO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_RESERVA DATETIME NULL,
    DATA_DEVOLUCAO DATETIME NULL CHECK(DATA_DEVOLUCAO >= DATA_RESERVA),
    MOTIVO_LIBERACAO VARCHAR(255) NULL COMMENT 'Justificativa da liberação da reserva de um item. Preenchido somente quando RESERVADO = N',
    DATA_CRIACAO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID),
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)*/
);

CREATE TABLE VENDAS (
    ID INT AUTO_INCREMENT PRIMARY KEY COMMENT 'chave candidata para número do pedido',
    FK_CLIENTE INT NOT NULL,
    FK_VENDEDOR INT NOT NULL,
    FK_ORIGEM INT NOT NULL,
    FK_SITUACAO INT NOT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL CHECK (VALOR_TOTAL > 0),
	FK_FORMA_PAGAMENTO_PREVISTA INT NOT NULL,
	QUANTIDADE_PARCELAS INT NOT NULL DEFAULT 1,
	DATA_PRIMEIRO_VENCIMENTO DATE NOT NULL,
    OBSERVACOES VARCHAR(4000) NULL,
    DATA_VENDA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FK_PRE_VENDA INT NULL/*,
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID),
    FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_FORMA_PAGAMENTO_PREVISTA) REFERENCES FORMAS_PAGAMENTO (ID),
    FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID)*/
);

CREATE TABLE VENDA_ITENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_VENDA INT NOT NULL,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL CHECK (QUANTIDADE > 0),
    PRECO_ORIGINAL DECIMAL(10, 2) NULL COMMENT 'valor histórico (sem desconto). É PRODUTO.VALOR_ATUAL no momento da venda (sem desconto)',
    VALOR_DESCONTO DECIMAL(10, 2) NULL COMMENT 'por unidade, se houver',
    PRECO_UNITARIO_FINAL DECIMAL(10, 2) NOT NULL COMMENT 'após desconto',
    VALOR_TOTAL_ITENS DECIMAL(10, 2) GENERATED ALWAYS AS (QUANTIDADE * PRECO_UNITARIO_FINAL) STORED/*,
    FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID),
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)*/
);

-- MÓDULO FINANCEIRO
CREATE TABLE CREDITOS_RECEBER (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FK_VENDA INT NOT NULL,
    ID_PARCELA INT NOT NULL DEFAULT 1,
	FK_SITUACAO INT NOT NULL,
	VALOR_ORIGINAL DECIMAL(10, 2) NOT NULL,
	DATA_EMISSAO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	DATA_VENCIMENTO DATE NOT NULL,
	OBSERVACOES TEXT NULL,
	DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
	FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID),
	FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
	FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID)*/
);

CREATE TABLE RECEBIMENTOS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FK_CREDITO_RECEBER INT NOT NULL,
	VALOR_PAGO DECIMAL(10, 2) NOT NULL,
	DATA_PAGAMENTO DATE NOT NULL,
	FK_FORMA_PAGAMENTO INT NOT NULL,
	OBSERVACOES VARCHAR(4000) NULL,
	DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
	DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
	FOREIGN KEY (FK_CREDITO_RECEBER) REFERENCES CREDITOS_RECEBER (ID),
	FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID)*/
);

CREATE TABLE OBRIGACOES_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_FORNECEDOR INT NOT NULL,
    FK_SITUACAO INT NOT NULL,
    FK_CATEGORIA_FINANCEIRA INT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    DATA_EMISSAO DATE NOT NULL,
    DATA_VENCIMENTO DATE NOT NULL,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_CATEGORIA_FINANCEIRA) REFERENCES CATEGORIAS_FINANCEIRAS (ID)*/
);

CREATE TABLE PAGAMENTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_OBRIGACAO_FINANCEIRA INT NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) NOT NULL,
    DATA_PAGAMENTO DATE NOT NULL,
    FK_FORMA_PAGAMENTO INT NOT NULL,
    OBSERVACOES VARCHAR(4000) NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_OBRIGACAO_FINANCEIRA) REFERENCES OBRIGACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID)*/
);

CREATE TABLE FORMAS_PAGAMENTO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL UNIQUE,
	NATUREZA VARCHAR(1) NOT NULL DEFAULT 'V' COMMENT 'V = à vista, P = a prazo',
    ORDEM INT NOT NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE SITUACOES_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NOT NULL,
    ORDEM INT NOT NULL,
    COR VARCHAR(100) NULL COMMENT 'Ex: #FF0000',
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não'
);

CREATE TABLE NATUREZAS_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NULL,
    ORDEM INT NOT NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE CATEGORIAS_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NULL,
    FK_NATUREZA_FINANCEIRA INT NOT NULL,
    ORDEM INT NOT NULL,
    ATIVO CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'S = Sim, N = Não',
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP/*,
    FOREIGN KEY (FK_NATUREZA_FINANCEIRA) REFERENCES NATUREZAS_FINANCEIRAS (ID)*/
);

-- CONSTRAINTS
ALTER TABLE PRODUTO_CATEGORIAS 
ADD CONSTRAINT CHK_PC_TAXA_MARGEM_LUCRO CHECK (TAXA_MARGEM_LUCRO BETWEEN 0 AND 100),
ADD CONSTRAINT CHK_PC_TAXA_PARCELAMENTO CHECK (TAXA_PARCELAMENTO BETWEEN 0 AND 100),
ADD CONSTRAINT CHK_PC_TAXA_DESCONTO CHECK (TAXA_DESCONTO BETWEEN 0 AND 100);

ALTER TABLE VENDEDORES 
ADD CONSTRAINT CHK_VD_COMISSAO CHECK (PERCENTUAL_COMISSAO BETWEEN 0 AND 100);

-- FOREIGN KEYS
ALTER TABLE USUARIOS_PERFIS ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS (ID);
ALTER TABLE USUARIOS_PERFIS ADD FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS (ID);

ALTER TABLE APLICACOES_MODULOS ADD FOREIGN KEY (FK_MODULO) REFERENCES MODULOS(ID);
ALTER TABLE APLICACOES_MODULOS ADD FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID);

ALTER TABLE PERMISSOES ADD FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS(ID);
ALTER TABLE PERMISSOES ADD FOREIGN KEY (FK_APLICACAO) REFERENCES APLICACOES(ID);

ALTER TABLE USUARIOS_SESSOES ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);

ALTER TABLE USUARIOS_BLOQUEIOS ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);
ALTER TABLE USUARIOS_BLOQUEIOS ADD FOREIGN KEY (FK_BLOQUEADO_POR) REFERENCES USUARIOS(ID);

ALTER TABLE RECUPERACAO_SENHA ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);

ALTER TABLE USUARIOS_TENTATIVAS_LOGIN ADD FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS(ID);

ALTER TABLE PRODUTOS ADD FOREIGN KEY (FK_CATEGORIA) REFERENCES PRODUTO_CATEGORIAS (ID);
ALTER TABLE PRODUTOS ADD FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID);

ALTER TABLE ESTOQUES ADD FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID);

ALTER TABLE ESTOQUE_MOVIMENTACOES ADD FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID);
ALTER TABLE ESTOQUE_MOVIMENTACOES ADD FOREIGN KEY (FK_ACAO) REFERENCES ESTOQUE_ACOES_MOVIMENTACAO (ID);
ALTER TABLE ESTOQUE_MOVIMENTACOES ADD FOREIGN KEY (FK_ORIGEM) REFERENCES ESTOQUE_ORIGENS_MOVIMENTACAO (ID);

ALTER TABLE VENDAS ADD FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_SITUACAO) REFERENCES VENDA_SITUACOES (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_FORMA_PAGAMENTO_PREVISTA) REFERENCES FORMAS_PAGAMENTO (ID);
ALTER TABLE VENDAS ADD FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID);

ALTER TABLE VENDA_ITENS ADD FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID);
ALTER TABLE VENDA_ITENS ADD FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID);

ALTER TABLE PRE_VENDAS ADD FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE PRE_VENDAS ADD FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID);
ALTER TABLE PRE_VENDAS ADD FOREIGN KEY (FK_SITUACAO) REFERENCES PRE_VENDA_SITUACOES (ID);

ALTER TABLE PRE_VENDA_ITENS ADD FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID);
ALTER TABLE PRE_VENDA_ITENS ADD FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID);

ALTER TABLE CREDITOS_RECEBER ADD FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID);
ALTER TABLE CREDITOS_RECEBER ADD FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID);

ALTER TABLE RECEBIMENTOS ADD FOREIGN KEY (FK_CREDITO_RECEBER) REFERENCES CREDITOS_RECEBER (ID);
ALTER TABLE RECEBIMENTOS ADD FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID);

ALTER TABLE OBRIGACOES_FINANCEIRAS ADD FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID);
ALTER TABLE OBRIGACOES_FINANCEIRAS ADD FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID);
ALTER TABLE OBRIGACOES_FINANCEIRAS ADD FOREIGN KEY (FK_CATEGORIA_FINANCEIRA) REFERENCES CATEGORIAS_FINANCEIRAS (ID);

ALTER TABLE PAGAMENTOS ADD FOREIGN KEY (FK_OBRIGACAO_FINANCEIRA) REFERENCES OBRIGACOES_FINANCEIRAS (ID);
ALTER TABLE PAGAMENTOS ADD FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID);

ALTER TABLE CATEGORIAS_FINANCEIRAS ADD FOREIGN KEY (FK_NATUREZA_FINANCEIRA) REFERENCES NATUREZAS_FINANCEIRAS(ID);

ALTER TABLE VENDEDORES ADD FOREIGN KEY (ID) REFERENCES USUARIOS (ID);

-- PROCEDURES
/* VERIFICA SE EXCEDEU A LIMITE DE TENTATIVAS PARA BLOQUEAR LOGIN */
CREATE PROCEDURE SP_BLOQUEAR_LOGIN_APOS_EXCEDER_LIMITE_TENTATIVAS(IN P_ID_USUARIO INT)
BEGIN
    DECLARE V_FALHAS INT;
    DECLARE V_LIMITE INT;

    SELECT COUNT(*) INTO V_FALHAS
    FROM USUARIOS_TENTATIVAS_LOGIN
    WHERE FK_USUARIO = P_ID_USUARIO
        AND SUCESSO = 'N'
        AND DATA_TENTATIVA >= (NOW() - INTERVAL 15 MINUTE);

    SELECT VALOR INTO V_LIMITE FROM CONFIGURACOES WHERE CHAVE = 'MAX_LOGIN_ATTEMPTS';

    IF V_FALHAS >= V_LIMITE THEN
        INSERT INTO USUARIOS_BLOQUEIOS (
            FK_USUARIO,
            MOTIVO,
            DATA_BLOQUEIO,
            ORIGEM
        ) VALUES (
            P_ID_USUARIO,
            'BLOQUEIO AUTOMÁTICO POR EXCESSO DE TENTATIVAS FALHAS DE LOGIN',
            NOW(),
            'TENTATIVAS FALHAS'
        );
    END IF;
END;

/* VERIFICA SE JÁ EXISTEM CRÉDITOS GERADOS */
CREATE PROCEDURE SP_EXISTEM_CREDITOS_GERADOS(IN P_VENDA_ID INT, OUT P_EXISTEM INT)
BEGIN
    SELECT COUNT(1) INTO P_EXISTEM FROM CREDITOS_RECEBER WHERE FK_VENDA = P_VENDA_ID;
    IF P_EXISTEM > 0 THEN 
        SET P_EXISTEM = 1; 
    ELSE
        SET P_EXISTEM = 0; 
    END IF;
END;

/* VALIDA LIMITE DE CREDIÁRIO DO CLIENTE */
CREATE PROCEDURE SP_VALIDAR_LIMITE_CREDIARIO(IN P_VENDA_ID INT)
BEGIN
    DECLARE V_CLIENTE INT;
    DECLARE V_VALOR_VENDA DECIMAL(13,2);
    DECLARE V_LIMITE DECIMAL(13,2);
    DECLARE V_SALDO_ABERTO DECIMAL(13,2) DEFAULT 0;
    DECLARE V_PAGO INT;
    DECLARE V_CANCELADA INT;
    
    SELECT FK_CLIENTE, VALOR_TOTAL INTO V_CLIENTE, V_VALOR_VENDA FROM VENDAS WHERE ID = P_VENDA_ID;
    SELECT COALESCE(LIMITE_CREDIARIO,0) INTO V_LIMITE FROM CLIENTES WHERE ID = V_CLIENTE FOR UPDATE; -- avoids race conditions
    SET V_PAGO = 2;
    SET V_CANCELADA = 3;

    -- SOMAR PARCELAS 'EM ABERTO' DO CLIENTE
    SELECT COALESCE(SUM(CR.VALOR_ORIGINAL - COALESCE(R.TOTAL_PAGO, 0)), 0)
    INTO V_SALDO_ABERTO
    FROM CREDITOS_RECEBER CR
    LEFT JOIN (
        SELECT FK_CREDITO_RECEBER, SUM(VALOR_PAGO) AS TOTAL_PAGO
        FROM RECEBIMENTOS
        GROUP BY FK_CREDITO_RECEBER
    ) R ON R.FK_CREDITO_RECEBER = CR.ID
    WHERE CR.FK_SITUACAO NOT IN (V_PAGO, V_CANCELADA)
        AND CR.FK_VENDA IN (SELECT ID FROM VENDAS WHERE FK_CLIENTE = V_CLIENTE);

    IF (V_SALDO_ABERTO + V_VALOR_VENDA) > V_LIMITE THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'LIMITE DE CRÉDITO DO CLIENTE EXCEDIDO';
    END IF;
END;

/* MOVIMENTA ESTOQUE APÓS CANCELAMENTO DE UMA VENDA */
CREATE PROCEDURE SP_REVERTER_ESTOQUE_APOS_VENDA_CANCELADA (
  IN P_VENDA_ID INT
)
BEGIN
    DECLARE V_ACAO_ENTRADA INT;
    DECLARE V_ORIGEM_DEVOLUCAO INT;

    SET V_ACAO_ENTRADA = 1;
    SET V_ORIGEM_DEVOLUCAO = 4;

    INSERT INTO ESTOQUE_MOVIMENTACOES (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
    SELECT FK_PRODUTO, QUANTIDADE, V_ACAO_ENTRADA, V_ORIGEM_DEVOLUCAO, P_VENDA_ID
    FROM VENDA_ITENS
    WHERE FK_VENDA = P_VENDA_ID;
END;

/* GERAR CRÉDITOS PARA VENDA TANTO À VISTA QUANTO PARCELADO */
CREATE PROCEDURE SP_GERAR_CREDITOS_VENDA(IN P_VENDA_ID INT)
SP_GERAR_CREDITOS_VENDA: BEGIN
    DECLARE V_EXISTEM_CREDITOS INT DEFAULT 0;
    DECLARE V_FORMA_PAGAMENTO INT;
    DECLARE V_NATUREZA_PAGAMENTO CHAR(1);
    DECLARE V_ABERTA INT;
    DECLARE V_PAGO INT;
    DECLARE V_ID_PARCELA INT;
    DECLARE V_QTD_PARCELAS INT;
    DECLARE V_DATA_VENDA DATETIME;
    DECLARE V_DATA_PRIMEIRO_VENCIMENTO DATE;
    DECLARE V_DATA_VENCIMENTO DATE;
    DECLARE V_VALOR_PARCELA DECIMAL(10,2);
    DECLARE V_VALOR_PARCELA_CENTAVOS INT;
    DECLARE V_BASE_CENTAVOS INT;
    DECLARE V_RESTO INT;
    DECLARE V_TOTAL_VENDA DECIMAL(13,2);
    DECLARE V_TOTAL_VENDA_CENTAVOS INT;
    DECLARE V_ID_ULTIMO_CREDITO_INSERIDO INT;

    SET V_ABERTA = 1;
    SET V_PAGO = 2;
    SET V_ID_PARCELA = 1;

    -- 1) IDEMPOTÊNCIA: SE JÁ GEROU, SAIR
    CALL SP_EXISTEM_CREDITOS_GERADOS(P_VENDA_ID, V_EXISTEM_CREDITOS);
    IF V_EXISTEM_CREDITOS = 1 THEN
        LEAVE SP_GERAR_CREDITOS_VENDA;
    END IF;

    -- 2) VALIDAR LIMITE ANTES DE CRIAR (ENVIA SIGNAL SE EXCEDER)
    CALL SP_VALIDAR_LIMITE_CREDIARIO(P_VENDA_ID);

    SELECT DATA_VENDA, VALOR_TOTAL, QUANTIDADE_PARCELAS, DATA_PRIMEIRO_VENCIMENTO, FK_FORMA_PAGAMENTO_PREVISTA
    INTO V_DATA_VENDA, V_TOTAL_VENDA, V_QTD_PARCELAS, V_DATA_PRIMEIRO_VENCIMENTO, V_FORMA_PAGAMENTO
    FROM VENDAS
    WHERE ID = P_VENDA_ID;

    SELECT NATUREZA INTO V_NATUREZA_PAGAMENTO FROM FORMAS_PAGAMENTO WHERE ID = V_FORMA_PAGAMENTO;

    IF V_NATUREZA_PAGAMENTO = 'V' THEN
        -- FORMA DE PAGAMENTO À VISTA: INSERIR 1 CREDITO PAGO E 1 RECEBIMENTO
        INSERT INTO CREDITOS_RECEBER (FK_VENDA, ID_PARCELA, FK_SITUACAO, VALOR_ORIGINAL, DATA_EMISSAO, DATA_VENCIMENTO)
        VALUES (P_VENDA_ID, V_ID_PARCELA, V_PAGO, V_TOTAL_VENDA, V_DATA_VENDA, V_DATA_PRIMEIRO_VENCIMENTO);
        SET V_ID_ULTIMO_CREDITO_INSERIDO = LAST_INSERT_ID();
    
        INSERT INTO RECEBIMENTOS (FK_CREDITO_RECEBER, VALOR_PAGO, DATA_PAGAMENTO, FK_FORMA_PAGAMENTO)
        VALUES (V_ID_ULTIMO_CREDITO_INSERIDO, V_TOTAL_VENDA, V_DATA_VENDA, V_FORMA_PAGAMENTO);
    ELSE
        -- PARCELADO: DISTRIBUIR CENTAVOS CORRETAMENTE
        SET V_TOTAL_VENDA_CENTAVOS = ROUND(V_TOTAL_VENDA * 100);
        SET V_BASE_CENTAVOS = FLOOR(V_TOTAL_VENDA_CENTAVOS / V_QTD_PARCELAS);
        SET V_RESTO = V_TOTAL_VENDA_CENTAVOS - V_BASE_CENTAVOS * V_QTD_PARCELAS;
    
        WHILE V_ID_PARCELA <= V_QTD_PARCELAS DO
            SET V_VALOR_PARCELA_CENTAVOS = V_BASE_CENTAVOS;
        
            IF V_ID_PARCELA <= V_RESTO THEN
                SET V_VALOR_PARCELA_CENTAVOS = V_VALOR_PARCELA_CENTAVOS + 1;
            END IF;
        
            SET V_VALOR_PARCELA = V_VALOR_PARCELA_CENTAVOS / 100;
            SET V_DATA_VENCIMENTO = DATE_ADD(V_DATA_PRIMEIRO_VENCIMENTO, INTERVAL (V_ID_PARCELA - 1) MONTH);
        
            INSERT INTO CREDITOS_RECEBER (FK_VENDA, ID_PARCELA, FK_SITUACAO, VALOR_ORIGINAL, DATA_EMISSAO, DATA_VENCIMENTO)
            VALUES (P_VENDA_ID, V_ID_PARCELA, V_ABERTA, V_VALOR_PARCELA, V_DATA_VENDA, V_DATA_VENCIMENTO);
        
            SET V_ID_PARCELA = V_ID_PARCELA + 1;
        END WHILE;
    END IF;
END;

-- TRIGGERS
/* Chama Procedure de bloqueio após tentativa de login */
CREATE TRIGGER TRG_TENTATIVA_LOGIN_FALHA
AFTER INSERT ON USUARIOS_TENTATIVAS_LOGIN
FOR EACH ROW
BEGIN
  IF NEW.SUCESSO = 'N' AND NEW.FK_USUARIO IS NOT NULL THEN
    CALL SP_BLOQUEAR_LOGIN_APOS_EXCEDER_LIMITE_TENTATIVAS(NEW.FK_USUARIO);
  END IF;
END;

/* Cria permissões padrão para todos os perfis de usuários e ajusta perfil administrador após criação de aplicação*/
CREATE TRIGGER TRG_APLICACOES_CRIAR_PERMISSOES_PADRAO
AFTER INSERT ON APLICACOES
FOR EACH ROW
BEGIN
  INSERT INTO PERMISSOES (FK_PERFIL, FK_APLICACAO)
  SELECT ID, NEW.ID FROM PERFIS;

  UPDATE PERMISSOES SET 
    ACESSAR  = 'S',
    INSERIR  = 'S',
    ATUALIZAR= 'S',
    EXCLUIR  = 'S',
    EXPORTAR = 'S',
    IMPRIMIR = 'S'
  WHERE 
    FK_PERFIL = 1
    AND FK_APLICACAO = NEW.ID;
END;

/* Cria permissões após criar perfil de usuário */
CREATE TRIGGER TRG_PERFIS_CRIAR_PERMISSOES_PADRAO
AFTER INSERT ON PERFIS
FOR EACH ROW
BEGIN
    INSERT INTO PERMISSOES (FK_PERFIL, FK_APLICACAO)
    SELECT NEW.ID, ID
    FROM APLICACOES;
END;

/* Apaga permissões antes de apagar aplicação */
CREATE TRIGGER TRG_APLICACOES_APAGAR_PERMISSOES
BEFORE DELETE ON APLICACOES
FOR EACH ROW
BEGIN
    DELETE FROM PERMISSOES
    WHERE FK_APLICACAO = OLD.ID;
END;

/* Apaga permissões antes de apagar perfil de usuário */
CREATE TRIGGER TRG_PERFIS_APAGAR_PERMISSOES
BEFORE DELETE ON PERFIS
FOR EACH ROW
BEGIN
    DELETE FROM PERMISSOES
    WHERE FK_PERFIL = OLD.ID;
END;

/* Atribui valor para campos de ordenação */
CREATE TRIGGER TRG_FORMAS_PAGAMENTO_ORDEM 
BEFORE INSERT ON FORMAS_PAGAMENTO 
FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;
	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  FORMAS_PAGAMENTO;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

CREATE TRIGGER TRG_SITUACOES_FINANCEIRAS_ORDEM 
BEFORE INSERT ON SITUACOES_FINANCEIRAS 
FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;
	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  SITUACOES_FINANCEIRAS;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

CREATE TRIGGER TRG_NATUREZAS_FINANCEIRAS_ORDEM 
BEFORE INSERT ON NATUREZAS_FINANCEIRAS 
FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;
	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  NATUREZAS_FINANCEIRAS;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

CREATE TRIGGER TRG_CATEGORIAS_FINANCEIRAS_ORDEM 
BEFORE INSERT ON CATEGORIAS_FINANCEIRAS 
FOR EACH ROW 
BEGIN 
	DECLARE MAX_ORDEM INT;
	SELECT
	  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
	FROM
	  CATEGORIAS_FINANCEIRAS;
	SET
	  NEW.ORDEM = MAX_ORDEM + 1;
END;

/* Todo produto cadastrado ganha automaticamente um registro no estoque */
CREATE TRIGGER TRG_PRODUTO_GERA_ESTOQUE
AFTER INSERT ON PRODUTOS
FOR EACH ROW
BEGIN
    INSERT INTO ESTOQUES (FK_PRODUTO, QUANTIDADE_ATUAL)
    VALUES (NEW.ID, 0);
END;

/* Atualiza automaticamente ESTOQUES ao movimentar um produto */
CREATE TRIGGER TRG_ATUALIZAR_SALDO_ESTOQUE
BEFORE INSERT ON ESTOQUE_MOVIMENTACOES
FOR EACH ROW
BEGIN
    DECLARE V_ATIVO CHAR(1);
    DECLARE V_QTD_ATUAL INT DEFAULT 0;
    DECLARE V_CORRECAO INT DEFAULT 5;
    DECLARE V_AJUSTE INT DEFAULT 4;

    IF NOT (NEW.FK_ORIGEM = V_CORRECAO AND NEW.FK_ACAO = V_AJUSTE) THEN
        SELECT ATIVO INTO V_ATIVO FROM PRODUTOS WHERE ID = NEW.FK_PRODUTO LIMIT 1;
        IF V_ATIVO = 'N' THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'PRODUTO INATIVO, MOVIMENTAÇÃO NÃO PERMITIDA';
        END IF;

        SELECT COALESCE((SELECT QUANTIDADE_ATUAL FROM ESTOQUES WHERE FK_PRODUTO = NEW.FK_PRODUTO LIMIT 1), 0) INTO V_QTD_ATUAL;
        IF (V_QTD_ATUAL + NEW.QUANTIDADE) < 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE PARA REALIZAR A OPERAÇÃO';
        END IF;
    END IF;

    -- atualizar estoques (se não existir, o update afetará 0 linhas e depois insert com quantidade da movimentação)
    UPDATE ESTOQUES SET QUANTIDADE_ATUAL = QUANTIDADE_ATUAL + NEW.QUANTIDADE WHERE FK_PRODUTO = NEW.FK_PRODUTO;
    IF ROW_COUNT() = 0 THEN
        INSERT INTO ESTOQUES (FK_PRODUTO, QUANTIDADE_ATUAL) VALUES (NEW.FK_PRODUTO, NEW.QUANTIDADE);
    END IF;
END;

/* Impede qualquer alteração (UPDATE) em ESTOQUE_MOVIMENTACOES */
CREATE TRIGGER TRG_BLOQUEAR_ATUALIZACAO_MOVIMENTACAO_ESTOQUE
BEFORE UPDATE ON ESTOQUE_MOVIMENTACOES
FOR EACH ROW
BEGIN
    SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'NÃO É PERMITIDO ATUALIZAR MOVIMENTAÇÕES DE ESTOQUE';
END;

/* Impede qualquer remoção (DELETE) em ESTOQUE_MOVIMENTACOES */
CREATE TRIGGER TRG_BLOQUEAR_EXCLUSAO_MOVIMENTACAO_ESTOQUE
BEFORE DELETE ON ESTOQUE_MOVIMENTACOES
FOR EACH ROW
BEGIN
    SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'NÃO É PERMITIDO EXCLUIR MOVIMENTAÇÕES DE ESTOQUE';
END;

/* CONTROLA INSERCAO DAS DATAS DE RESERVA E DEVOLUÇÃO DE ITENS DE UMA PRE-VENDA */
CREATE TRIGGER TRG_CONTROLAR_INSERCAO_DATAS_RESERVA_DEVOLUCAO
BEFORE INSERT ON PRE_VENDA_ITENS
FOR EACH ROW
BEGIN
    IF NEW.RESERVADO = 'S' THEN
        IF NEW.DATA_RESERVA IS NULL THEN
            SET NEW.DATA_RESERVA = NOW();
        END IF;

        SET NEW.DATA_DEVOLUCAO = NULL;
    END IF;

    IF NEW.RESERVADO = 'N' AND (NEW.MOTIVO_LIBERACAO IS NULL OR TRIM(NEW.MOTIVO_LIBERACAO) = '') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'É obrigatório informar MOTIVO_LIBERACAO quando RESERVADO = N';
    END IF;
END;

/* Movimenta estoque ao registrar itens em uma pre-venda */
CREATE TRIGGER TRG_PRE_VENDA_ITENS_RESERVA_SAIDA
AFTER INSERT ON PRE_VENDA_ITENS
FOR EACH ROW
BEGIN
    -- SE RESERVADO = 'S' → SAÍDA NO ESTOQUE
    IF NEW.RESERVADO = 'S' THEN
        INSERT INTO ESTOQUE_MOVIMENTACOES
            (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
        VALUES
            (NEW.FK_PRODUTO, -NEW.QUANTIDADE, 2, 3, NEW.FK_PRE_VENDA);
    END IF;
END;

/* CONTROLA ATUALIZACAO DAS DATAS DE RESERVA E DEVOLUÇÃO DE ITENS DE UMA PRE-VENDA */
CREATE TRIGGER TRG_CONTROLAR_ATUALIZACAO_DATAS_RESERVA_DEVOLUCAO
BEFORE UPDATE ON PRE_VENDA_ITENS
FOR EACH ROW
BEGIN
    IF OLD.RESERVADO = 'N' AND NEW.RESERVADO = 'S' THEN
        IF NEW.DATA_RESERVA IS NULL THEN
            SET NEW.DATA_RESERVA = NOW();
        END IF;

        SET NEW.DATA_DEVOLUCAO = NULL;
    END IF;

    IF OLD.RESERVADO = 'S' AND NEW.RESERVADO = 'N' THEN
        SET NEW.DATA_DEVOLUCAO = NOW();
    END IF;

    IF NEW.RESERVADO = 'N' AND (NEW.MOTIVO_LIBERACAO IS NULL OR TRIM(NEW.MOTIVO_LIBERACAO) = '') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'É obrigatório informar MOTIVO_LIBERACAO quando RESERVADO = N';
    END IF;

    IF NEW.RESERVADO NOT IN ('S','N') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Valor inválido para RESERVADO (esperado S ou N)';
    END IF;
END;


/* Movimenta estoque ao atualizar reserva de itens em uma pre-venda */
CREATE TRIGGER TRG_PRE_VENDA_ITENS_RESERVA_ATUALIZACAO
AFTER UPDATE ON PRE_VENDA_ITENS
FOR EACH ROW
BEGIN
    DECLARE V_ENTRADA INT;
    DECLARE V_SAIDA INT;
    DECLARE V_PREVENDA INT;

    SET V_ENTRADA = 1;
    SET V_SAIDA = 2;
    SET V_PREVENDA = 3;

    -- CASO 1: MUDOU DE N → S
    IF OLD.RESERVADO = 'N' AND NEW.RESERVADO = 'S' THEN
        INSERT INTO ESTOQUE_MOVIMENTACOES
            (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
        VALUES
            (NEW.FK_PRODUTO, -NEW.QUANTIDADE, V_SAIDA, V_PREVENDA, NEW.FK_PRE_VENDA);
    END IF;

    -- CASO 2: MUDOU DE S → N
    IF OLD.RESERVADO = 'S' AND NEW.RESERVADO = 'N' THEN
        INSERT INTO ESTOQUE_MOVIMENTACOES
            (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
        VALUES
            (NEW.FK_PRODUTO, OLD.QUANTIDADE, V_ENTRADA, V_PREVENDA, NEW.FK_PRE_VENDA);
    END IF;

    -- CASO 3: QUANTIDADE ALTERADA MANTENDO RESERVADO = 'S'
    IF OLD.RESERVADO = 'S' AND NEW.RESERVADO = 'S' AND OLD.QUANTIDADE <> NEW.QUANTIDADE THEN
        IF NEW.QUANTIDADE > OLD.QUANTIDADE THEN
            INSERT INTO ESTOQUE_MOVIMENTACOES
                (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
            VALUES
                (NEW.FK_PRODUTO, -(NEW.QUANTIDADE - OLD.QUANTIDADE), V_SAIDA, V_PREVENDA, NEW.FK_PRE_VENDA);
        ELSE
            INSERT INTO ESTOQUE_MOVIMENTACOES
                (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
            VALUES
                (NEW.FK_PRODUTO, (OLD.QUANTIDADE - NEW.QUANTIDADE), V_ENTRADA, V_PREVENDA, NEW.FK_PRE_VENDA);
        END IF;
    END IF;
END;

/* Movimenta estoque quando itens reservados de uma pre-venda são excluídos */
CREATE TRIGGER TRG_PRE_VENDA_ITENS_RESERVA_ENTRADA
BEFORE DELETE ON PRE_VENDA_ITENS
FOR EACH ROW
BEGIN
    DECLARE V_ENTRADA INT;
    DECLARE V_PREVENDA INT;

    SET V_ENTRADA = 1;
    SET V_PREVENDA = 3;

    -- SE AINDA ESTAVA RESERVADO → ENTRADA TOTAL DE PRODUTOS NO ESTOQUE
    IF OLD.RESERVADO = 'S' THEN
        INSERT INTO ESTOQUE_MOVIMENTACOES
            (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
        VALUES
            (OLD.FK_PRODUTO, OLD.QUANTIDADE, V_ENTRADA, V_PREVENDA, OLD.FK_PRE_VENDA);
    END IF;
END;

/* Impedir alteração quando situação CANCELADA */
CREATE TRIGGER TRG_PRE_VENDAS_BLOQUEAR_ATUALIZACAO_QUANDO_CANCELADA
BEFORE UPDATE ON PRE_VENDAS
FOR EACH ROW
BEGIN
    DECLARE V_CANCELADA INT DEFAULT 3;
    DECLARE V_DEVOLVIDA_PARCIALMENTE INT DEFAULT 4;
    
    IF OLD.FK_SITUACAO = V_CANCELADA THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Não é permitido atualizar uma pré-venda CANCELADA';
    END IF;

    -- 2) Se a nova situação for CANCELADA ou DEVOLVIDA PARCIALMENTE, DATA_EXPIRACAO é obrigatória
    IF NEW.FK_SITUACAO IN (V_CANCELADA, V_DEVOLVIDA_PARCIALMENTE) AND NEW.DATA_EXPIRACAO IS NULL THEN
        NEW.DATA_EXPIRACAO = CURDATE();
    END IF;
END;

/* Movimenta estoque ao alterar situação de pre-venda */
CREATE TRIGGER TRG_PRE_VENDA_CANCELADA_DEVOLVIDA
AFTER UPDATE ON PRE_VENDAS
FOR EACH ROW
BEGIN
    DECLARE V_RESERVADA INT;
    DECLARE V_CANCELADA INT;
    DECLARE V_DEVOLVIDA_PARCIALMENTE INT;
    DECLARE V_ENTRADA INT;
    DECLARE V_PREVENDA INT;

    SET V_RESERVADA = 1;
    SET V_CANCELADA = 3;
    SET V_DEVOLVIDA_PARCIALMENTE = 4;
    SET V_ENTRADA = 1;
    SET V_PREVENDA = 3;

    IF OLD.FK_SITUACAO = V_RESERVADA AND (NEW.FK_SITUACAO = V_CANCELADA OR NEW.FK_SITUACAO = V_DEVOLVIDA_PARCIALMENTE) THEN
        UPDATE PRE_VENDA_ITENS SET RESERVADO = 'N', DATA_DEVOLUCAO = NOW() WHERE FK_PRE_VENDA = NEW.ID AND RESERVADO = 'S';
        -- OBS: Isso acionará o TRG_PRE_VENDA_ITENS_RESERVA_ATUALIZACAO (AFTER UPDATE) que é responsável por registrar em ESTOQUE_MOVIMENTACOES.
    END IF;
END;

/* Bloqueia a exclusão de uma pré-venda e sugere cancelamento */
CREATE TRIGGER TRG_PREVENDAS_BLOQUEAR_EXCLUSAO
BEFORE DELETE ON PRE_VENDAS
FOR EACH ROW
BEGIN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Exclusão de PRÉ-VENDAS proibida. Altere situação para CANCELADA';
END;

/* VALIDA ITEM DA VENDA ATIVO E SALDO DISPONÍVEL NO ESTOQUE */
CREATE TRIGGER TRG_VENDA_ITEM_VALIDAR_MOVIMENTACAO
BEFORE INSERT ON VENDA_ITENS
FOR EACH ROW
BEGIN
    DECLARE V_ATIVO CHAR(1);
    DECLARE V_ORIGEM INT;
    DECLARE V_PREVENDA INT;
    DECLARE V_QTD_ATUAL INT DEFAULT 0;

    SELECT ATIVO INTO V_ATIVO FROM PRODUTOS WHERE ID = NEW.FK_PRODUTO LIMIT 1;
    SELECT FK_ORIGEM INTO V_ORIGEM FROM VENDAS WHERE ID = NEW.FK_VENDA LIMIT 1;
    SET V_PREVENDA = 2;

    IF V_ATIVO = 'N' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'PRODUTO INATIVO - VENDA NÃO PERMITIDA';
    END IF;

    IF V_ORIGEM <> V_PREVENDA THEN
        SELECT COALESCE(QUANTIDADE_ATUAL,0) INTO V_QTD_ATUAL FROM ESTOQUES WHERE FK_PRODUTO = NEW.FK_PRODUTO LIMIT 1;

        IF V_QTD_ATUAL < NEW.QUANTIDADE THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE PARA O ITEM DA VENDA';
        END IF;
    END IF;
END;

/* MOVIMENTA ESTOQUE AO REGISTRAR ITENS  DE UMA VENDA DIRETA */
CREATE TRIGGER TRG_VENDA_ITEM_MOVIMENTAR_SAIDA
AFTER INSERT ON VENDA_ITENS
FOR EACH ROW
BEGIN
    DECLARE V_ORIGEM INT;
    DECLARE V_PREVENDA INT;
    DECLARE V_SAIDA INT;
    DECLARE V_VENDA INT;

    SELECT FK_ORIGEM INTO V_ORIGEM FROM VENDAS WHERE ID = NEW.FK_VENDA LIMIT 1;
    SET V_PREVENDA = 2;
    SET V_SAIDA = 2;
    SET V_VENDA = 1;

    IF V_ORIGEM <> V_PREVENDA THEN
        INSERT INTO ESTOQUE_MOVIMENTACOES (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM)
        VALUES (NEW.FK_PRODUTO, -NEW.QUANTIDADE, V_SAIDA, V_VENDA, NEW.FK_VENDA);
    END IF;
END;

/* Gera creditos a receber após inserir venda confirmada, de acordo com a natureza da forma de pagamento (à vista ou a prazo) */
CREATE TRIGGER TRG_INSERIR_VENDA_CONFIRMADA_GERAR_CREDITOS
AFTER INSERT ON VENDAS
FOR EACH ROW
BEGIN
    DECLARE V_CONFIRMADA INT;
    DECLARE V_FINALIZADA INT;
    SET V_CONFIRMADA = 2;
    SET V_FINALIZADA = 2;

    IF NEW.FK_SITUACAO = V_CONFIRMADA THEN
        CALL SP_GERAR_CREDITOS_VENDA(NEW.ID);
        -- SE VIER DE PRÉ-VENDA A PROCEDURE PODE TAMBÉM ATUALIZAR PRE_VENDAS (OU FAÇA AQUI)
        IF NEW.FK_PRE_VENDA IS NOT NULL THEN
            UPDATE PRE_VENDAS SET FK_SITUACAO = V_FINALIZADA WHERE ID = NEW.FK_PRE_VENDA;
        END IF;
    END IF;
END;

/* Impedir alteração de algumas situações de venda */
CREATE TRIGGER TRG_VENDAS_BLOQUEAR_ATUALIZACAO_SITUACAO
BEFORE UPDATE ON VENDAS
FOR EACH ROW
BEGIN
    DECLARE V_AGUARDANDO INT DEFAULT 1;
    DECLARE V_CONFIRMADA INT DEFAULT 2;
    DECLARE V_CANCELADA INT DEFAULT 3;

    IF OLD.FK_SITUACAO = V_CONFIRMADA AND NEW.FK_SITUACAO = V_AGUARDANDO THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Não é permitido alterar a situação de uma venda CONFIRMADA para AGUARDANDO';
    END IF;
    
    IF OLD.FK_SITUACAO = V_CANCELADA THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Não é permitido atualizar uma venda CANCELADA';
    END IF;
END;

/* Gera creditos a receber após atualizar venda confirmada, de acordo com a natureza da forma de pagamento (à vista ou a prazo) */
CREATE TRIGGER TRG_ATUALIZAR_VENDA_CONFIRMADA_GERAR_CREDITOS
AFTER UPDATE ON VENDAS
FOR EACH ROW
BEGIN
    DECLARE V_CONFIRMADA INT;
    DECLARE V_FINALIZADA INT;
    DECLARE V_CANCELADA INT;
    SET V_CONFIRMADA = 2;
    SET V_FINALIZADA = 2;
    SET V_CANCELADA = 3;

    IF OLD.FK_SITUACAO <> V_CONFIRMADA AND NEW.FK_SITUACAO = V_CONFIRMADA THEN
    CALL SP_GERAR_CREDITOS_VENDA(NEW.ID);
    IF NEW.FK_PRE_VENDA IS NOT NULL THEN
        UPDATE PRE_VENDAS SET FK_SITUACAO = V_FINALIZADA WHERE ID = NEW.FK_PRE_VENDA;
    END IF;
    END IF;

  -- CANCELAMENTO
    IF OLD.FK_SITUACAO = V_CONFIRMADA AND NEW.FK_SITUACAO = V_CANCELADA THEN
    CALL SP_REVERTER_ESTOQUE_APOS_VENDA_CANCELADA(NEW.ID);
        UPDATE CREDITOS_RECEBER SET FK_SITUACAO = V_CANCELADA WHERE FK_VENDA = NEW.ID;
    END IF;
END;

/* Bloqueia a exclusão de uma venda e sugere cancelamento */
CREATE TRIGGER TRG_VENDAS_BLOQUEAR_EXCLUSAO
BEFORE DELETE ON VENDAS
FOR EACH ROW
BEGIN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Exclusão de VENDAS proibida. Altere situação para CANCELADA';
END;

/* Impedir alteração quando situação CANCELADA */
CREATE TRIGGER TRG_CREDITOS_RECEBER_BLOQUEAR_ATUALIZACAO_QUANDO_CANCELADA
BEFORE UPDATE ON CREDITOS_RECEBER
FOR EACH ROW
BEGIN
    DECLARE V_CANCELADA INT;
    SET V_CANCELADA = 3;
    
    IF OLD.FK_SITUACAO = V_CANCELADA THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Não é permitido atualizar um crédito a receber CANCELADO';
    END IF;
END;

/* Atualiza situação da parcela após quitação da dívida */
CREATE TRIGGER TRG_RECEBIMENTOS_ATUALIZAR_SITUACAO_CREDITO
AFTER INSERT ON RECEBIMENTOS
FOR EACH ROW
BEGIN
  DECLARE V_TOTAL_PAGO DECIMAL(13,2);
  DECLARE V_VAL_ORIGINAL DECIMAL(13,2);
  DECLARE V_PAGO INT;

  SELECT COALESCE(SUM(VALOR_PAGO),0) INTO V_TOTAL_PAGO FROM RECEBIMENTOS WHERE FK_CREDITO_RECEBER = NEW.FK_CREDITO_RECEBER;
  SELECT VALOR_ORIGINAL INTO V_VAL_ORIGINAL FROM CREDITOS_RECEBER WHERE ID = NEW.FK_CREDITO_RECEBER;
  SET V_PAGO = 2;

  IF V_TOTAL_PAGO >= V_VAL_ORIGINAL THEN
    UPDATE CREDITOS_RECEBER SET FK_SITUACAO = V_PAGO WHERE ID = NEW.FK_CREDITO_RECEBER;
  END IF;
END;

/* Devo permitir AFTER UPDATE ON RECEBIMENTOS ? */

/* Impedir alteração quando situação CANCELADA */
CREATE TRIGGER TRG_OBRIGACOES_FINANCEIRAS_BLOQUEAR_ATUALIZACAO_QUANDO_CANCELADA
BEFORE UPDATE ON OBRIGACOES_FINANCEIRAS
FOR EACH ROW
BEGIN
    DECLARE V_CANCELADA INT;
    SET V_CANCELADA = 3;
    
    IF OLD.FK_SITUACAO = V_CANCELADA THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Não é permitido atualizar uma obrigação financeira CANCELADA';
    END IF;
END;

-- ÍNDICES DE INTEGRIDADE
/* Impedir que a mesma parcela da mesma venda seja registrada duas vezes */
ALTER TABLE CREDITOS_RECEBER ADD UNIQUE IDX_CRED_VENDA_PARCELA (FK_VENDA, ID_PARCELA);

-- ÍNDICES de desempenho
ALTER TABLE PRODUTOS 
ADD INDEX IDX_PRODUTOS_FK_CATEGORIA (FK_CATEGORIA),
ADD INDEX IDX_PRODUTOS_FK_FORNECEDOR (FK_FORNECEDOR);

ALTER TABLE ESTOQUES ADD INDEX IDX_ESTOQUES_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE ESTOQUE_MOVIMENTACOES 
ADD INDEX IDX_EM_PRODUTO (FK_PRODUTO),
ADD INDEX IDX_EM_ACAO (FK_ACAO),
ADD INDEX IDX_EM_ORIGEM (FK_ORIGEM);

ALTER TABLE VENDAS 
ADD INDEX IDX_VENDAS_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_VENDAS_FK_VENDEDOR (FK_VENDEDOR),
ADD INDEX IDX_VENDAS_FORMA_PAGAMENTO (FK_FORMA_PAGAMENTO_PREVISTA),
ADD INDEX IDX_VENDAS_FK_SITUACAO (FK_SITUACAO);

ALTER TABLE VENDA_ITENS 
ADD INDEX IDX_VI_FK_VENDA (FK_VENDA),
ADD INDEX IDX_VI_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE PRE_VENDAS 
ADD INDEX IDX_PV_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_PV_FK_VENDEDOR (FK_VENDEDOR),
ADD INDEX IDX_PV_FK_SITUACAO (FK_SITUACAO);

ALTER TABLE PRE_VENDA_ITENS 
ADD INDEX IDX_PVI_FK_PRE_VENDA (FK_PRE_VENDA),
ADD INDEX IDX_PVI_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE CREDITOS_RECEBER 
ADD INDEX IDX_CR_FK_SITUACAO (FK_SITUACAO);

ALTER TABLE RECEBIMENTOS 
ADD INDEX IDX_REC_FK_CREDITO (FK_CREDITO_RECEBER),
ADD INDEX IDX_REC_FK_FORMA_PGTO (FK_FORMA_PAGAMENTO);

ALTER TABLE OBRIGACOES_FINANCEIRAS 
ADD INDEX IDX_OB_FK_FORNECEDOR (FK_FORNECEDOR),
ADD INDEX IDX_OB_FK_SITUACAO (FK_SITUACAO),
ADD INDEX IDX_OB_FK_CATEG_FINANCEIRA (FK_CATEGORIA_FINANCEIRA);

ALTER TABLE PAGAMENTOS 
ADD INDEX IDX_PG_FK_OBRIGACAO (FK_OBRIGACAO_FINANCEIRA),
ADD INDEX IDX_PG_FK_FORMA_PGTO (FK_FORMA_PAGAMENTO);

ALTER TABLE CATEGORIAS_FINANCEIRAS 
ADD INDEX IDX_CATF_FK_NATUREZA (FK_NATUREZA_FINANCEIRA);

ALTER TABLE LOGS  
ADD INDEX IDX_LOGS_USERNAME (username), 
ADD INDEX IDX_LOGS_APPLICATION (application), 
ADD INDEX IDX_LOGS_ACTION (action), 
ADD INDEX IDX_LOGS_INSERTED_DATE (inserted_date);

ALTER TABLE USUARIOS_SESSOES 
ADD INDEX IDX_SESSAO_TOKEN (TOKEN_HASH),
ADD INDEX IDX_SESSAO_USUARIO (FK_USUARIO), 
ADD INDEX IDX_US_SESSOES_EXP (DATA_EXPIRACAO);

ALTER TABLE USUARIOS_BLOQUEIOS 
ADD INDEX IDX_BLOQUEIO_USUARIO (FK_USUARIO);

ALTER TABLE RECUPERACAO_SENHA 
ADD UNIQUE INDEX IDX_RECUP_SENHA_TOKEN (TOKEN), 
ADD INDEX IDX_RECUP_SENHA_USUARIO (FK_USUARIO);

ALTER TABLE USUARIOS_TENTATIVAS_LOGIN 
ADD INDEX IDX_TENTATIVA_USUARIO (FK_USUARIO),
ADD INDEX IDX_TENTATIVA_DATA (DATA_TENTATIVA),
ADD INDEX IDX_TENTATIVA_SUCESSO (SUCESSO);

-- SEEDs (parâmetros)
INSERT INTO ESTOQUE_ACOES_MOVIMENTACAO (ID, ACAO) VALUES
('1', 'ENTRADA'),
('2', 'SAÍDA'),
('3', 'DEVOLUÇÃO'),
('4', 'AJUSTE');

INSERT INTO ESTOQUE_ORIGENS_MOVIMENTACAO (ID, ORIGEM) VALUES
('1', 'VENDA'),
('2', 'COMPRA'),
('3', 'PRÉ-VENDA'),
('4', 'DEVOLUÇÃO'),
('5', 'CORRECAO');
  
INSERT INTO VENDA_ORIGENS (ID, DESCRICAO) VALUES
('1', 'VENDA DIRETA (BALCÃO)'),
('2', 'PRÉ-VENDA CONVERTIDA'),
('3', 'VENDA ONLINE'),
('4', 'VENDA POR TELEFONE'),
('5', 'VENDA EXTERNA (REPRESENTANTE)'),
('6', 'VENDA MANUAL/LIVRE');

INSERT INTO VENDA_SITUACOES (ID, DESCRICAO, ATIVO, EXPLICACAO) VALUES
('1', 'Em aberto','S','Venda iniciada, mas ainda sem movimentação de estoque e sem efeitos financeiros.'),
('2', 'Confirmada','S','Venda confirmada, movimenta estoque e gera titulos financeiros.'),
('3', 'Cancelada','S','Venda cancelada, movimenta estoque e cancela titulos financeiros.'),
('4', 'Devolvida','N','Cliente devolveu o produto, estoque ajustado e cancelamento de creditos a receber.'),
('5', 'Estornada','N','Pagamento foi estornado (reversão financeira), geralmente por cartão de crédito ou Pix.'),
('6', 'Em análise','N','Pagamento enviado, aguardando aprovação ou análise antifraude.'),
('7', 'Faturada','N','Nota fiscal emitida para a venda.'),
('8', 'Entregue','N','Produto entregue ao cliente.');

INSERT INTO PRE_VENDA_SITUACOES (ID, DESCRICAO) VALUES
('1', 'RESERVADA'),
('2', 'FINALIZADA'),
('3', 'CANCELADA'),
('4', 'DEVOLVIDA PARCIALMENTE');

INSERT INTO FORMAS_PAGAMENTO (ID, NOME, ORDEM, ATIVO, NATUREZA) VALUES
('1', 'DINHEIRO', 1, 'S', 'V'),
('2', 'PIX', 2, 'S', 'V'),
('3', 'CARTÃO DÉBITO', 3, 'S', 'V'),
('4', 'CARTÃO CRÉDITO', 4, 'S', 'P'),
('5', 'CREDIÁRIO', 5, 'S', 'P'),
('6', 'BOLETO', 6, 'S', 'P'),
('7', 'DOAÇÃO', 7, 'S', 'V');

INSERT INTO SITUACOES_FINANCEIRAS (ID, NOME,DESCRICAO,ORDEM,COR,ATIVO) VALUES
('1', 'ABERTA','Conta aberta aguardando pagamento',1,'#CCCCCC','S'),
('2', 'PAGA','Conta quitada',2,'#00CC00','S'),
('3', 'CANCELADA','Conta cancelada por erro ou devolução',6,'#999999','S'),
('4', 'ATRASADA','Pagamento em atraso',3,'#FF0000','S'),
('5', 'PARCIALMENTE_PAGA','Conta parcialmente quitada',4,'#FF9900','N'),
('6', 'NEGOCIADA','Conta renegociada com novo vencimento',5,'#0066CC','N'),
('7', 'ISENTA','Conta isenta de cobrança',7,'#0099CC','N'),
('8', 'EM_DISPUTA','Conta em análise ou contestação',8,'#CC0066','N'),
('9', 'ANTECIPADA','Conta paga antes do vencimento',9,'#006600','N');

INSERT INTO NATUREZAS_FINANCEIRAS (ID, NOME, DESCRICAO) VALUES
('1', 'RECEITA', 'Entrada de valores'),
('2', 'DESPESA', 'Saída de valores'),
('3', 'TRANSFERENCIA','Transferência entre contas ou caixas'),
('4', 'ESTORNO', 'Reversão de receita ou despesa'),
('5', 'INVESTIMENTO','Aplicações financeiras ou aquisição de ativos'),
('6', 'EMPRESTIMO', 'Valores recebidos de terceiros'),
('7', 'PAGAMENTO','Quitação de obrigação financeira'),
('8', 'DEVOLUCAO','Estorno por devolução de produto ou serviço'),
('9', 'AJUSTE','Correções ou ajustes contábeis manuais');

INSERT INTO CATEGORIAS_FINANCEIRAS (ID, NOME, DESCRICAO, FK_NATUREZA_FINANCEIRA) VALUES
('1', 'CREDIÁRIO LOJA FÍSICA','Venda parcelada no crediário interno',1),
('2', 'CARTÃO DE CRÉDITO','Venda parcelada via operadora',1),
('3', 'PIX IMEDIATO', 'Recebimento à vista via PIX', 1),
('4', 'BOLETO BANCÁRIO','Recebimento programado via boleto',1),
('5', 'VENDA ONLINE','Receita gerada por e-commerce',1),
('6', 'DISTRIBUIDOR',  'Vendas para distribuidores',1),
('7', 'REPRESENTANTE','Vendas via representante comercial',1),
('8', 'SERVICOS',     'Receita de serviços prestados',1);
('9', 'FORNECEDOR ESTOQUE','Compra de produtos para revenda',2),
('10', 'DESPESA FIXA - ALUGUEL','Pagamento mensal do ponto físico',2),
('11', 'CAMPANHA MARKETING','Investimento em divulgação',5);

INSERT INTO PERFIS (ID, NOME, DESCRICAO, NIVEL_ACESSO) VALUES
('1', 'Administrador',        'Acesso total ao sistema',          99),
('2', 'Operador Financeiro',  'Acesso restrito ao financeiro',    50),
('3', 'Caixa',                'Operações de venda e caixa',       20),
('4', 'Vendedor',             'Registro de vendas e consultas',   10);

-- Configurações Gerais
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('NOME_EMPRESA', 'Val Mendes Modas', 'Nome comercial da empresa para exibição nos relatórios e etiquetas', 'STRING', 'GERAL'),
('EMAIL_EMPRESA', 'contato@valmendesmodas.com.br', 'E-mail padrão para contato e envio de cobranças', 'STRING', 'GERAL'),
('TELEFONE_EMPRESA', '(19) 99999-0000', 'Telefone de contato exibido em documentos', 'STRING', 'GERAL'),
('CNPJ_EMPRESA', '12.345.678/0001-90', 'CNPJ da empresa para relatórios e contratos', 'STRING', 'GERAL'),
('FUSO_HORARIO', 'America/Sao_Paulo', 'Fuso horário do sistema', 'STRING', 'GERAL'),
('IDIOMA_PADRAO', 'pt_BR', 'Idioma padrão do sistema', 'STRING', 'GERAL');
-- Financeiro
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('PERCENTUAL_LUCRO_PADRAO', '30', 'Lucro percentual padrão aplicado ao preço de custo', 'DECIMAL', 'FINANCEIRO'),
('VENCIMENTO_CREDIARIO_PADRAO', '30', 'Número de dias padrão para vencimento de vendas a prazo (crediário)', 'INT', 'FINANCEIRO'),
('AVISO_INADIMPLENCIA_DIAS', '5', 'Dias antes ou após vencimento para envio de mensagem de inadimplência', 'INT', 'FINANCEIRO'),
('EXIBIR_FLUXO_CAIXA_INICIAL', 'S', 'Exibir fluxo de caixa na tela inicial do sistema', 'BOOLEAN', 'FINANCEIRO'),
('FORMA_PAGAMENTO_PADRAO', 'Dinheiro', 'Forma de pagamento sugerida nas vendas à vista', 'STRING', 'FINANCEIRO');
-- Etiquetas e Impressão
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('ETIQUETA_LARGURA_CM', '5.0', 'Largura da etiqueta padrão em centímetros', 'DECIMAL', 'ETIQUETAS'),
('ETIQUETA_ALTURA_CM', '3.0', 'Altura da etiqueta padrão em centímetros', 'DECIMAL', 'ETIQUETAS'),
('ETIQUETA_MODELO_PADRAO', 'modelo1', 'Modelo de layout de etiqueta padrão', 'STRING', 'ETIQUETAS'),
('IMPRIMIR_PRECO_ETIQUETA', 'S', 'Se deve imprimir o preço de venda na etiqueta', 'BOOLEAN', 'ETIQUETAS'),
('IMPRIMIR_LOGO_ETIQUETA', 'S', 'Se deve imprimir a logo da empresa na etiqueta', 'BOOLEAN', 'ETIQUETAS');
-- Mensagens
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('MENSAGEM_COBRANCA_PADRAO', 'Olá, tudo bem? Verificamos que há um pagamento em aberto. Por favor, entre em contato para regularizar. Loja Val Mendes Modas', 'Mensagem de cobrança enviada por WhatsApp', 'STRING', 'MENSAGENS'),
('MENSAGEM_AGRADECIMENTO_VENDA', 'Obrigado por comprar conosco! Esperamos te ver em breve', 'Mensagem de agradecimento automática após venda', 'STRING', 'MENSAGENS');
-- Vendas
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('HABILITAR_PRE_VENDA', 'S', 'Permitir operação de pré-venda no sistema', 'BOOLEAN', 'VENDAS'),
('PERMITIR_DESCONTO_LIVRE', 'N', 'Permitir inserir descontos livres no momento da venda', 'BOOLEAN', 'VENDAS'),
('DESCONTO_MAXIMO_AUTORIZADO', '15', 'Desconto percentual máximo sem autorização gerencial', 'DECIMAL', 'VENDAS'),
('GERAR_PEDIDO_AUTOMATICO', 'S', 'Gerar pedido automaticamente após finalização de venda', 'BOOLEAN', 'VENDAS');
-- Relatórios
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('GRAFICO_METRICA_PADRAO', 'vendas_diarias', 'Tipo de métrica padrão exibida no gráfico da dashboard', 'STRING', 'RELATORIOS'),
('EXIBIR_TOP_CLIENTES', 'S', 'Exibir ranking de clientes que mais compraram na dashboard', 'BOOLEAN', 'RELATORIOS');
-- Segurança / Sistema
INSERT INTO CONFIGURACOES (CHAVE, VALOR, DESCRICAO, TIPO, AGRUPAMENTO) VALUES
('SESSION_COOKIE_NAME', 'minhaloja_session', 'Nome do cookie usado para armazenar a sessão', 'STRING', 'SEGURANCA'),
('SESSION_LIFETIME_CLIENT', '14400', 'Controla quanto tempo o navegador do usuário mantém o cookie de sessão', 'INT', 'SEGURANCA'),
('SESSION_LIFETIME_SERVER', '14400', 'Define por quanto tempo a sessão será válida no banco de dados', 'INT', 'SEGURANCA'),
('FORCE_STRONG_PASSWORD', 'S', 'Obrigar uso de senha forte para usuários do sistema', 'BOOLEAN', 'SEGURANCA'),
('PASSWORD_MIN_LENGTH', '8', 'Quantidade mínima de caracteres exigidos para senha', 'INT', 'SEGURANCA'),
('PASSWORD_EXPIRE_DAYS', '90', 'Número de dias antes da senha expirar', 'INT', 'SEGURANCA'),
('MAX_LOGIN_ATTEMPTS', '5', 'Número máximo de tentativas de login antes de bloqueio', 'INT', 'SEGURANCA'),
('LOGIN_BLOCK_TIME', '15', 'Tempo de bloqueio após tentativas falhas de login (em minutos)', 'INT', 'SEGURANCA');


-- Cria usuário Administrador
INSERT INTO USUARIOS (NOME, LOGIN, SENHA_HASH, EMAIL)
VALUES ('Admin Sistema', 'admin', /*SHA2('admin123', 256)*/'$2y$10$En2aP2bibrhrvZNwSFTJ4uwcw95tcUi2.2fCu.EbtvtsWFgiT7Kvq', 'admin@empresa.com.br');
SET @ID_ADMIN := LAST_INSERT_ID();

INSERT INTO LOGS (username, application, action, description, ip_user, creator)
VALUES (
  'admin',
  'Sistema',
  'CRIAÇÃO',
  'Usuário administrador criado e perfil vinculado',
  '127.0.0.1',
  'test simulator'
);

INSERT INTO USUARIOS_PERFIS (FK_USUARIO, FK_PERFIL)
VALUES (
  @ID_ADMIN,
  (SELECT ID FROM PERFIS WHERE NOME = 'Administrador')
);

-- Módulos
INSERT INTO MODULOS (ID, NOME, DESCRICAO) VALUES
('1', 'Cadastro',   'Manutenção de cadastros de entidades mestres'),
('2', 'Estoque',    'Gestão de entradas, saídas e inventário'),
('3', 'Vendas',     'Operações de vendas e pré-vendas'),
('4', 'Finanças', 'Controle de fluxo de caixa, contas a pagar e receber'),
('5', 'Relatórios', 'Geração de relatórios gerenciais e operacionais'),
('6', 'Segurança',  'Gerenciamento de usuários, perfis e permissões'),
('7', 'Configurações', 'Configurações gerais do sistema');

-- Aplicações / Telas
INSERT INTO APLICACOES (NOME, DESCRICAO, ROTA) VALUES
('APLICACOES_F', 'Funcionalidade de aplicações - Formulário', '/APLICACOES_F/'),
('APLICACOES_G', 'Funcionalidade de aplicações - Grid', '/APLICACOES_G/'),
('APLICACOES_MODULOS_F', 'Funcionalidade de aplicações por módulo - Formulário', '/APLICACOES_MODULOS_F/'),
('APLICACOES_MODULOS_G', 'Funcionalidade de aplicações por módulo - Grid', '/APLICACOES_MODULOS_G/'),
('CATEGORIAS_FINANCEIRAS_F', 'Categorias financeiras - Formulário', '/CATEGORIAS_FINANCEIRAS_F/'),
('CATEGORIAS_FINANCEIRAS_G', 'Categorias financeiras - Grid', '/CATEGORIAS_FINANCEIRAS_G/'),
('CLIENTES_F', 'Cadastro de clientes - Formulário', '/CLIENTES_F/'),
('CLIENTES_G', 'Cadastro de clientes - Grid', '/CLIENTES_G/'),
('CONFIGURACOES_F', 'Configurações do sistema - Formulário', '/CONFIGURACOES_F/'),
('CONFIGURACOES_G', 'Configurações do sistema - Grid', '/CONFIGURACOES_G/'),
('CREDITOS_RECEBER_F', 'Créditos a receber - Formulário', '/CREDITOS_RECEBER_F/'),
('CREDITOS_RECEBER_G', 'Créditos a receber - Grid', '/CREDITOS_RECEBER_G/'),
('ESTOQUES_F', 'Gestão de estoques - Formulário', '/ESTOQUES_F/'),
('ESTOQUES_G', 'Gestão de estoques - Grid', '/ESTOQUES_G/'),
('ESTOQUE_ACOES_MOVIMENTACAO_F', 'Ações de movimentação de estoque - Formulário', '/ESTOQUE_ACOES_MOVIMENTACAO_F/'),
('ESTOQUE_ACOES_MOVIMENTACAO_G', 'Ações de movimentação de estoque - Grid', '/ESTOQUE_ACOES_MOVIMENTACAO_G/'),
('ESTOQUE_MOVIMENTACOES_F', 'Movimentações de estoque - Formulário', '/ESTOQUE_MOVIMENTACOES_F/'),
('ESTOQUE_MOVIMENTACOES_G', 'Movimentações de estoque - Grid', '/ESTOQUE_MOVIMENTACOES_G/'),
('ESTOQUE_ORIGENS_MOVIMENTACAO_F', 'Origens de movimentação de estoque - Formulário', '/ESTOQUE_ORIGENS_MOVIMENTACAO_F/'),
('ESTOQUE_ORIGENS_MOVIMENTACAO_G', 'Origens de movimentação de estoque - Grid', '/ESTOQUE_ORIGENS_MOVIMENTACAO_G/'),
('FORMAS_PAGAMENTO_F', 'Formas de pagamento - Formulário', '/FORMAS_PAGAMENTO_F/'),
('FORMAS_PAGAMENTO_G', 'Formas de pagamento - Grid', '/FORMAS_PAGAMENTO_G/'),
('FORNECEDORES_F', 'Cadastro de fornecedores - Formulário', '/FORNECEDORES_F/'),
('FORNECEDORES_G', 'Cadastro de fornecedores - Grid', '/FORNECEDORES_G/'),
('FORNECEDORES_CATEGORIAS_F', 'Categorias de fornecedores - Formulário', '/FORNECEDORES_CATEGORIAS_F/'),
('FORNECEDORES_CATEGORIAS_G', 'Categorias de fornecedores - Grid', '/FORNECEDORES_CATEGORIAS_G/'),
('GRUPOS_FINANCEIROS_F', 'Grupos financeiros - Formulário', '/GRUPOS_FINANCEIROS_F/'),
('GRUPOS_FINANCEIROS_G', 'Grupos financeiros - Grid', '/GRUPOS_FINANCEIROS_G/'),
('LOGS_F', 'Logs do sistema - Formulário', '/LOGS_F/'),
('LOGS_G', 'Logs do sistema - Grid', '/LOGS_G/'),
('LOGIN', 'Tela de login do sistema', '/LOGIN/'),
('LOGOUT', 'Encerramento de sessão', '/LOGOUT/'),
('MENU', 'Menu principal do sistema', '/MENU/'),
('MODULOS_F', 'Módulos do sistema - Formulário', '/MODULOS_F/'),
('MODULOS_G', 'Módulos do sistema - Grid', '/MODULOS_G/'),
('NATUREZAS_FINANCEIRAS_F', 'Naturezas financeiras - Formulário', '/NATUREZAS_FINANCEIRAS_F/'),
('NATUREZAS_FINANCEIRAS_G', 'Naturezas financeiras - Grid', '/NATUREZAS_FINANCEIRAS_G/'),
('OBRIGACOES_FINANCEIRAS_F', 'Obrigações financeiras - Formulário', '/OBRIGACOES_FINANCEIRAS_F/'),
('OBRIGACOES_FINANCEIRAS_G', 'Obrigações financeiras - Grid', '/OBRIGACOES_FINANCEIRAS_G/'),
('PAGAMENTOS_F', 'Pagamentos - Formulário', '/PAGAMENTOS_F/'),
('PAGAMENTOS_G', 'Pagamentos - Grid', '/PAGAMENTOS_G/'),
('PERFIS_F', 'Perfis de usuário - Formulário', '/PERFIS_F/'),
('PERFIS_G', 'Perfis de usuário - Grid', '/PERFIS_G/'),
('PERMISSOES_F', 'Permissões de acesso - Formulário', '/PERMISSOES_F/'),
('PERMISSOES_G', 'Permissões de acesso - Grid', '/PERMISSOES_G/'),
('PRE_VENDAS_F', 'Pré-vendas - Formulário', '/PRE_VENDAS_F/'),
('PRE_VENDAS_G', 'Pré-vendas - Grid', '/PRE_VENDAS_G/'),
('PRE_VENDA_ITENS_F', 'Itens da pré-venda - Formulário', '/PRE_VENDA_ITENS_F/'),
('PRE_VENDA_ITENS_G', 'Itens da pré-venda - Grid', '/PRE_VENDA_ITENS_G/'),
('PRE_VENDA_SITUACOES_F', 'Situações da pré-venda - Formulário', '/PRE_VENDA_SITUACOES_F/'),
('PRE_VENDA_SITUACOES_G', 'Situações da pré-venda - Grid', '/PRE_VENDA_SITUACOES_G/'),
('PRODUTOS_F', 'Cadastro de produtos - Formulário', '/PRODUTOS_F/'),
('PRODUTOS_G', 'Cadastro de produtos - Grid', '/PRODUTOS_G/'),
('PRODUTO_CATEGORIAS_F', 'Categorias de produtos - Formulário', '/PRODUTO_CATEGORIAS_F/'),
('PRODUTO_CATEGORIAS_G', 'Categorias de produtos - Grid', '/PRODUTO_CATEGORIAS_G/'),
('RECEBIMENTOS_F', 'Recebimentos - Formulário', '/RECEBIMENTOS_F/'),
('RECEBIMENTOS_G', 'Recebimentos - Grid', '/RECEBIMENTOS_G/'),
('RECUPERACAO_SENHA_F', 'Recuperação de senha - Formulário', '/RECUPERACAO_SENHA_F/'),
('RECUPERACAO_SENHA_G', 'Recuperação de senha - Grid', '/RECUPERACAO_SENHA_G/'),
('SITUACOES_FINANCEIRAS_F', 'Situações financeiras - Formulário', '/SITUACOES_FINANCEIRAS_F/'),
('SITUACOES_FINANCEIRAS_G', 'Situações financeiras - Grid', '/SITUACOES_FINANCEIRAS_G/'),
('USUARIOS_BLOQUEIOS_F', 'Bloqueios de usuários - Formulário', '/USUARIOS_BLOQUEIOS_F/'),
('USUARIOS_BLOQUEIOS_G', 'Bloqueios de usuários - Grid', '/USUARIOS_BLOQUEIOS_G/'),
('USUARIOS_F', 'Cadastro de usuários - Formulário', '/USUARIOS_F/'),
('USUARIOS_G', 'Cadastro de usuários - Grid', '/USUARIOS_G/'),
('USUARIOS_PERFIS_F', 'Perfis de usuários vinculados - Formulário', '/USUARIOS_PERFIS_F/'),
('USUARIOS_PERFIS_G', 'Perfis de usuários vinculados - Grid', '/USUARIOS_PERFIS_G/'),
('USUARIOS_SESSOES_F', 'Sessões de usuários - Formulário', '/USUARIOS_SESSOES_F/'),
('USUARIOS_SESSOES_G', 'Sessões de usuários - Grid', '/USUARIOS_SESSOES_G/'),
('USUARIOS_TENTATIVAS_LOGIN_F', 'Tentativas de login - Formulário', '/USUARIOS_TENTATIVAS_LOGIN_F/'),
('USUARIOS_TENTATIVAS_LOGIN_G', 'Tentativas de login - Grid', '/USUARIOS_TENTATIVAS_LOGIN_G/'),
('VENDAS_F', 'Vendas - Formulário', '/VENDAS_F/'),
('VENDAS_G', 'Vendas - Grid', '/VENDAS_G/'),
('VENDA_ITENS_F', 'Itens da venda - Formulário', '/VENDA_ITENS_F/'),
('VENDA_ITENS_G', 'Itens da venda - Grid', '/VENDA_ITENS_G/'),
('VENDA_ORIGENS_F', 'Origens da venda - Formulário', '/VENDA_ORIGENS_F/'),
('VENDA_ORIGENS_G', 'Origens da venda - Grid', '/VENDA_ORIGENS_G/'),
('VENDA_SITUACOES_F', 'Situações da venda - Formulário', '/VENDA_SITUACOES_F/'),
('VENDA_SITUACOES_G', 'Situações da venda - Grid', '/VENDA_SITUACOES_G/'),
('VENDEDORES_F', 'Cadastro de vendedores - Formulário', '/VENDEDORES_F/'),
('VENDEDORES_G', 'Cadastro de vendedores - Grid', '/VENDEDORES_G/');

-- ====================================================
-- ===================== TESTES =======================
-- ====================================================

-- Simulação de Venda entre Vendedor e Cliente, a prazo
INSERT INTO PERMISSOES (
  FK_PERFIL, FK_APLICACAO,
  ACESSAR, INSERIR, ATUALIZAR, EXCLUIR, EXPORTAR, IMPRIMIR
)
SELECT
    P.ID, A.ID, S, S, S, S, S, S
FROM 
    PERFIS P
    CROSS JOIN APLICACOES A
WHERE 
    P.NOME = 'Administrador';

-- Cliente
INSERT INTO CLIENTES (NOME, CPF, CONTATO, LIMITE_CREDIARIO)
VALUES ('Maria da Silva', '12345678901', '19991234567', 1000.00);
SET @ID_CLIENTE = LAST_INSERT_ID();

-- Usuário vendedor
INSERT INTO USUARIOS (NOME, LOGIN, EMAIL, SENHA_HASH)
VALUES ('Carlos Vendedor', 'carlos', 'carlos@loja.com', SHA2('senha123', 256));
SET @ID_USUARIO = LAST_INSERT_ID();

-- Perfil vendedor (caso não exista ainda)
/*INSERT IGNORE INTO PERFIS (NOME, DESCRICAO, NIVEL_ACESSO)
VALUES ('Vendedor', 'Permite realizar vendas', 10);*/
SET @ID_PERFIL = (SELECT ID FROM PERFIS WHERE NOME = 'Vendedor');

-- Associação com o perfil
INSERT INTO USUARIOS_PERFIS (FK_USUARIO, FK_PERFIL)
VALUES (@ID_USUARIO, @ID_PERFIL);

-- Vendedor (ID igual ao usuário)
INSERT INTO VENDEDORES (ID, APELIDO, PERCENTUAL_COMISSAO)
VALUES (@ID_USUARIO, 'Carlos', 5.0);


-- ====================================================
-- 1. Cadastrar PRODUTOS
-- ====================================================
INSERT INTO FORNECEDORES (NOME, CNPJ, TIPO_PESSOA, CONTATO, ENDERECO, ATIVO, OBSERVACOES) VALUES
('Tecno Vest LTDA', '12345678000195', 'J', 'Marcos Silva - (11) 98888-1111', 'Rua das Indústrias, 120 - Centro - São Paulo/SP', 1, 'Fornecedor principal de tecidos e aviamentos'),
('Estilo & Moda Confecções', '22345678000188', 'J', 'Fernanda Alves - (11) 97777-2222', 'Av. Fashion, 450 - Brás - São Paulo/SP', 1, 'Entrega rápida e preços competitivos'),
('Carlos Henrique Souza', '12345678901', 'F', 'Carlos H. Souza - (11) 96666-3333', 'Rua João Pedro, 58 - Santo Amaro - São Paulo/SP', 1, 'Fornecedor de peças exclusivas sob encomenda'),
('Global Têxtil Importadora', '32345678000177', 'J', 'Ricardo Moura - (21) 95555-4444', 'Av. Atlântica, 999 - Copacabana - Rio de Janeiro/RJ', 1, 'Fornecedor internacional de tecidos finos'),
('Maria Eduarda Lima', '98765432100', 'F', 'Maria E. Lima - (31) 94444-5555', 'Rua das Flores, 321 - Centro - Belo Horizonte/MG', 0, 'Fornecedor eventual; atualmente inativo');
 
INSERT INTO PRODUTO_CATEGORIAS (NOME, DESCRICAO, TAXA_MARGEM_LUCRO, TAXA_PARCELAMENTO, TAXA_DESCONTO) VALUES 
('Roupas Masculinas', 'Camisas, calças, bermudas e acessórios masculinos.', 40, 10, 5),
('Roupas Femininas', 'Vestidos, saias, blusas e acessórios femininos.', 45, 12, 8),
('Calçados', 'Tênis, sapatos, sandálias e chinelos.', 35, 8, 5),
('Acessórios', 'Bolsas, carteiras, cintos, bonés e outros.', 50, 15, 10),
('Moda Infantil', 'Roupas e calçados para crianças.', 38, 10, 7),
('Esporte e Lazer', 'Roupas esportivas, chuteiras, bolas e equipamentos.', 42, 12, 6);

INSERT INTO PRODUTOS (DESCRICAO,FK_CATEGORIA,FK_FORNECEDOR,CUSTO_AQUISICAO,VALOR_ATUAL,PRECIFICACAO_AUTOMATICA,ATIVO,CODIGO_BARRAS) VALUES
('Camisa Polo', 1, 1, 50.00, 120.00, 'N', S, 'CP001'),
('Calça Jeans', 1, 3, 70.00, 80.00, 'N', S, 'CJ001'),
('Vestido Floral', 2, 2, 60.00, 150.00, 'N', S, 'VF001'),
('Tênis Esportivo', 3, 4, 90.00, 200.00, 'N', S, 'TE001'),
('Bolsa de Couro', 4, 2, 80.00, 250.00, 'N', S, 'BC001'),
('Cinto Masculino', 4, 1, 30.00, 75.00, 'N', S, 'CM001'),
('Jaqueta Infantil', 5, 3, 55.00, 130.00, 'N', S, 'JI001'),
('Bola de Futebol', 6, 4, 40.00, 95.00, 'N', S, 'BF001');

-- ====================================================
-- 2. Criar uma venda
-- ====================================================
INSERT INTO VENDAS (FK_CLIENTE,FK_VENDEDOR,FK_ORIGEM,FK_SITUACAO,VALOR_TOTAL,DATA_VENDA) VALUES 
(@ID_CLIENTE, @ID_USUARIO, 1, 2, 200.00, NOW());
SET @ID_VENDA := LAST_INSERT_ID();

-- ====================================================
-- 3. Inserir itens da venda
-- ====================================================
INSERT INTO VENDA_ITENS (FK_VENDA, FK_PRODUTO, QUANTIDADE, PRECO_ORIGINAL, VALOR_DESCONTO, PRECO_UNITARIO_FINAL) VALUES 
(@ID_VENDA, 1/*'Camisa Polo'*/,  1, 120.00, 0.00, 120.00),
(@ID_VENDA, 2/*'Calça Jeans'*/, 1, 80.00, 0.00, 80.00);

-- ====================================================
-- 4. Movimentação de estoque (saída de produtos vendidos)
-- ====================================================
INSERT INTO ESTOQUE_MOVIMENTACOES (FK_PRODUTO, QUANTIDADE, FK_ACAO, FK_ORIGEM, ID_TRANSACAO_ORIGEM, DATA_MOVIMENTACAO)
SELECT
	FK_PRODUTO,
	-QUANTIDADE/*negativo = saída*/,
	2/*SAIDA*/,
	1/*VENDA*/,
	@ID_VENDA,
	NOW()
FROM 
	VENDA_ITENS
WHERE 
	FK_VENDA = @ID_VENDA;

UPDATE ESTOQUES E
JOIN VENDA_ITENS VI ON VI.FK_PRODUTO = E.FK_PRODUTO
SET E.QUANTIDADE_ATUAL = E.QUANTIDADE_ATUAL - VI.QUANTIDADE
WHERE VI.FK_VENDA = @ID_VENDA;

-- ====================================================
-- 5. Gerar creditos a receber em 2 parcelas (crediário)
-- ====================================================
INSERT INTO CREDITOS_RECEBER (FK_CLIENTE, FK_VENDA, FK_SITUACAO, FK_FORMA_PREVISTA_PAGAMENTO, VALOR_TOTAL, DATA_EMISSAO, DATA_VENCIMENTO) VALUES 
(@ID_CLIENTE, @ID_VENDA, 1/*ABERTA*/, 3/*CREDIÁRIO*/, 100.00, CURDATE(), DATE_ADD(CURDATE(),  INTERVAL 30 DAY)), 
(@ID_CLIENTE, @ID_VENDA, 1/*ABERTA*/, 3/*CREDIÁRIO*/, 100.00, CURDATE(), DATE_ADD(CURDATE(),  INTERVAL 60 DAY));