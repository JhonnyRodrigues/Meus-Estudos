---------------------------------------------------- PRODUTOS ---------------------------------------------------------
CREATE TABLE
  PRODUTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(100) NOT NULL,
    FK_CATEGORIA INT NOT NULL,
    FK_FORNECEDOR INT NULL,
    CUSTO_AQUISICAO DECIMAL(10, 2) NULL,
    VALOR_ATUAL DECIMAL(10, 2) NULL, -- preço à vista
    PRECIFICACAO_AUTOMATICA BOOLEAN DEFAULT FALSE,
    ATIVO BOOLEAN DEFAULT TRUE,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CODIGO_BARRAS VARCHAR(20) UNIQUE,
    FOREIGN KEY (FK_CATEGORIA) REFERENCES PRODUTO_CATEGORIAS (ID),
    FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID)
  );

CREATE TABLE
  PRODUTO_CATEGORIAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(100) NULL,
    TAXA_MARGEM_LUCRO DECIMAL(5, 2) NULL,
    TAXA_PARCELAMENTO DECIMAL(5, 2) NULL,
    TAXA_DESCONTO DECIMAL(5, 2) NULL,
    ATIVO BOOLEAN DEFAULT TRUE,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE
  ESTOQUES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRODUTO INT NOT NULL UNIQUE, -- um registro por produto
    QUANTIDADE_ATUAL INT NOT NULL DEFAULT 0,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)
  );

CREATE TABLE
  ESTOQUE_ACOES_MOVIMENTACAO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ACAO VARCHAR(100) NOT NULL,
    ATIVO BOOLEAN DEFAULT TRUE
  );

CREATE TABLE
  ESTOQUE_ORIGENS_MOVIMENTACAO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ORIGEM VARCHAR(100) NOT NULL,
    ATIVO BOOLEAN DEFAULT TRUE
  );

CREATE TABLE
  ESTOQUE_MOVIMENTACOES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL,
    FK_ACAO INT NOT NULL, -- entrada, saída.
    FK_ORIGEM INT NULL, -- compra, venda.
    FK_REFERENCIA INT NULL, -- referência a venda, compra, etc.
    DATA_MOVIMENTACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    OBSERVACOES VARCHAR(4000) NULL,
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID),
    FOREIGN KEY (FK_ACAO) REFERENCES ESTOQUE_ACOES_MOVIMENTACAO (ID),
    FOREIGN KEY (FK_ORIGEM) REFERENCES ESTOQUE_ORIGENS_MOVIMENTACAO (ID)
  );

---------------------------------------------------- VENDAS ------------------------------------------------------------------
CREATE TABLE
  VENDA_ORIGENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
    ATIVO BOOLEAN DEFAULT TRUE
  );

CREATE TABLE
  VENDA_SITUACOES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
    ATIVO BOOLEAN DEFAULT TRUE
  );

CREATE TABLE
  PRE_VENDA_SITUACOES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(50) NOT NULL UNIQUE,
    ATIVO BOOLEAN DEFAULT TRUE
  );

CREATE TABLE
  VENDAS (
    ID INT AUTO_INCREMENT PRIMARY KEY, -- chave candidata para número do pedido
    FK_CLIENTE INT NOT NULL,
    FK_VENDEDOR INT NOT NULL,
    FK_ORIGEM INT NULL,
    FK_SITUACAO INT NOT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    DATA_VENDA DATETIME DEFAULT CURRENT_TIMESTAMP,
    OBSERVACOES VARCHAR(4000) NULL,
    FK_PRE_VENDA INT NULL,
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID),
    FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID)
  );

CREATE TABLE
  VENDA_ITENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_VENDA INT NOT NULL,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL,
    PRECO_ORIGINAL DECIMAL(10, 2) NULL, -- valor histórico (sem desconto). É PRODUTO.VALOR_ATUAL no momento da venda (sem desconto)
    VALOR_DESCONTO DECIMAL(10, 2) NULL, -- por unidade, se houver
    PRECO_UNITARIO_FINAL DECIMAL(10, 2) NOT NULL, -- após desconto
    VALOR_TOTAL_ITENS DECIMAL(10, 2) GENERATED ALWAYS AS (QUANTIDADE * PRECO_UNITARIO_FINAL) STORED,
    FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID),
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)
  );

CREATE TABLE
  PRE_VENDAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_CLIENTE INT NOT NULL,
    FK_VENDEDOR INT NOT NULL,
    FK_ORIGEM INT NULL,
    FK_SITUACAO INT NOT NULL,
    DATA_RESERVA DATETIME NULL,
    DATA_DEVOLUCAO DATE NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    OBSERVACOES VARCHAR(4000) NULL,
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_VENDEDOR) REFERENCES VENDEDORES (ID),
    FOREIGN KEY (FK_ORIGEM) REFERENCES VENDA_ORIGENS (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES PRE_VENDA_SITUACOES (ID)
  );

CREATE TABLE
  PRE_VENDA_ITENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_PRE_VENDA INT NOT NULL,
    FK_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL CHECK (QUANTIDADE > 0),
    RESERVADO BOOLEAN NOT NULL DEFAULT TRUE,
    MOTIVO_LIBERACAO VARCHAR(255) NULL, -- justificativa da liberação da reserva de um item. Preenchido somente quando RESERVADO = FALSE
    FOREIGN KEY (FK_PRE_VENDA) REFERENCES PRE_VENDAS (ID),
    FOREIGN KEY (FK_PRODUTO) REFERENCES PRODUTOS (ID)
  );

---------------------------------------------------------FINANÇAS ---------------------------------------------------------
CREATE TABLE
  CREDITOS_RECEBER (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_VENDA INT NOT NULL,
    FK_CLIENTE INT NOT NULL,
    FK_SITUACAO INT NOT NULL,
    FK_FORMA_PAGAMENTO INT NOT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) DEFAULT 0,
    DATA_EMISSAO DATE NOT NULL,
    DATA_VENCIMENTO DATE NOT NULL,
    DATA_PAGAMENTO DATE NULL,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (FK_VENDA) REFERENCES VENDAS (ID),
    FOREIGN KEY (FK_CLIENTE) REFERENCES CLIENTES (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID)
  );

CREATE TABLE
  RECEBIMENTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_CREDITO_RECEBER INT NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) NOT NULL,
    DATA_PAGAMENTO DATE NOT NULL,
    FK_FORMA_PAGAMENTO INT NOT NULL,
    OBSERVACOES VARCHAR(4000) NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (FK_CREDITO_RECEBER) REFERENCES CREDITOS_RECEBER (ID),
    FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID)
  );

CREATE TABLE
  OBRIGACOES_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_FORNECEDOR INT NOT NULL,
    FK_SITUACAO INT NOT NULL,
    FK_CATEGORIA_FINANCEIRA INT NULL,
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) DEFAULT 0,
    DATA_EMISSAO DATE NOT NULL,
    DATA_VENCIMENTO DATE NOT NULL,
    DATA_PAGAMENTO DATE NULL,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (FK_FORNECEDOR) REFERENCES FORNECEDORES (ID),
    FOREIGN KEY (FK_SITUACAO) REFERENCES SITUACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_CATEGORIA_FINANCEIRA) REFERENCES CATEGORIAS_FINANCEIRAS (ID)
  );

CREATE TABLE
  PAGAMENTOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FK_OBRIGACAO_FINANCEIRA INT NOT NULL,
    VALOR_PAGO DECIMAL(10, 2) NOT NULL,
    DATA_PAGAMENTO DATE NOT NULL,
    FK_FORMA_PAGAMENTO INT NOT NULL,
    OBSERVACOES VARCHAR(4000) NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (FK_OBRIGACAO_FINANCEIRA) REFERENCES OBRIGACOES_FINANCEIRAS (ID),
    FOREIGN KEY (FK_FORMA_PAGAMENTO) REFERENCES FORMAS_PAGAMENTO (ID)
  );

CREATE TABLE
  FORMAS_PAGAMENTO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRICAO VARCHAR(100) NOT NULL UNIQUE,
    ORDEM INT NOT NULL,
    ATIVO BOOLEAN DEFAULT TRUE
  );

CREATE TABLE
  SITUACOES_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NOT NULL,
    ORDEM INT NOT NULL,
    COR VARCHAR(100) NULL, -- ex: '#FF0000'
    ATIVO ENUM ('S', 'N') DEFAULT 'S'
  );

CREATE TABLE
  NATUREZAS_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NULL,
    ORDEM INT NOT NULL,
    ATIVO BOOLEAN DEFAULT TRUE,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE
  CATEGORIAS_FINANCEIRAS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(255) NULL,
    FK_NATUREZA_FINANCEIRA INT NOT NULL,
    ORDEM INT NOT NULL,
    ATIVO BOOLEAN DEFAULT TRUE,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (FK_NATUREZA_FINANCEIRA) REFERENCES NATUREZAS_FINANCEIRAS (ID)
  );

---------------------------------------------------- CADASTRO ------------------------------------------------------------
CREATE TABLE
  CLIENTES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CPF VARCHAR(11) UNIQUE,
    CONTATO VARCHAR(50),
    EMAIL VARCHAR(100) UNIQUE,
    LIMITE_CREDIARIO DECIMAL(10, 2),
    ATIVO BOOLEAN DEFAULT TRUE,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE
  FORNECEDORES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CNPJ VARCHAR(14) UNIQUE,
    TIPO_PESSOA ENUM ('F', 'J') NOT NULL COMMENT 'F = Física, J = Jurídica',
    CONTATO VARCHAR(100),
    ENDERECO VARCHAR(500),
    ATIVO BOOLEAN DEFAULT TRUE,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE
  USUARIOS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(150) NOT NULL UNIQUE,
    HASH_SENHA VARCHAR(255) NOT NULL,
    ATIVO BOOLEAN DEFAULT TRUE,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  );

CREATE TABLE
  VENDEDORES (
    ID INT PRIMARY KEY, -- mesmo valor de USUARIOS.ID
    APELIDO VARCHAR(50),
    PERCENTUAL_COMISSAO DECIMAL(5, 2),
    ATIVO BOOLEAN DEFAULT TRUE,
    OBSERVACOES TEXT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    DATA_ATUALIZACAO DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (ID) REFERENCES USUARIOS (ID)
  );

CREATE TABLE
  PERFIS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL UNIQUE,
    DESCRICAO VARCHAR(100) NULL
  );

CREATE TABLE
  USUARIOS_PERFIS (
    FK_USUARIO INT NOT NULL,
    FK_PERFIL INT NOT NULL,
    DATA_CRIACAO DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (FK_USUARIO, FK_PERFIL),
    FOREIGN KEY (FK_USUARIO) REFERENCES USUARIOS (ID),
    FOREIGN KEY (FK_PERFIL) REFERENCES PERFIS (ID)
  );

--------------------------------------------------- TRIGGERS ordenacao -------------------------------------------------
-- DELIMITER $$
CREATE TRIGGER TRG_ORDEM_FORMAS_PAGAMENTO BEFORE INSERT ON FORMAS_PAGAMENTO FOR EACH ROW BEGIN DECLARE MAX_ORDEM INT;
SELECT
  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
FROM
  FORMAS_PAGAMENTO;
SET
  NEW.ORDEM = MAX_ORDEM + 1;
END --$$
-- DELIMITER ;

-- DELIMITER $$
CREATE TRIGGER TRG_ORDEM_SITUACOES_FINANCEIRAS BEFORE INSERT ON SITUACOES_FINANCEIRAS FOR EACH ROW BEGIN DECLARE MAX_ORDEM INT;
SELECT
  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
FROM
  SITUACOES_FINANCEIRAS;
SET
  NEW.ORDEM = MAX_ORDEM + 1;
END --$$
-- DELIMITER ;

-- DELIMITER $$
CREATE TRIGGER TRG_ORDEM_NATUREZAS_FINANCEIRAS BEFORE INSERT ON NATUREZAS_FINANCEIRAS FOR EACH ROW BEGIN DECLARE MAX_ORDEM INT;
SELECT
  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
FROM
  NATUREZAS_FINANCEIRAS;
SET
  NEW.ORDEM = MAX_ORDEM + 1;
END --$$
-- DELIMITER ;

-- DELIMITER $$
CREATE TRIGGER TRG_ORDEM_CATEGORIAS_FINANCEIRAS BEFORE INSERT ON CATEGORIAS_FINANCEIRAS FOR EACH ROW BEGIN DECLARE MAX_ORDEM INT;
SELECT
  IFNULL (MAX(ORDEM), 0) INTO MAX_ORDEM
FROM
  CATEGORIAS_FINANCEIRAS;
SET
  NEW.ORDEM = MAX_ORDEM + 1;
END --$$
-- DELIMITER ;

--------------------------------------------------- CHECK constraints --------------------------------------------------
ALTER TABLE PRODUTOS ADD CONSTRAINT CHK_PROD_PRECIFICACAO_BOOLEAN CHECK (PRECIFICACAO_AUTOMATICA IN (0, 1));

ALTER TABLE PRODUTO_CATEGORIAS ADD CONSTRAINT CHK_PC_MARGEM_LUCRO CHECK (MARGEM_LUCRO BETWEEN 0 AND 100),
ADD CONSTRAINT CHK_PC_TAXA_PARCELAMENTO CHECK (TAXA_PARCELAMENTO BETWEEN 0 AND 100),
ADD CONSTRAINT CHK_PC_TAXA_DESCONTO CHECK (TAXA_DESCONTO BETWEEN 0 AND 100);

ALTER TABLE VENDEDORES ADD CONSTRAINT CHK_VD_COMISSAO CHECK (PERCENTUAL_COMISSAO BETWEEN 0 AND 100);

ALTER TABLE PRE_VENDA_ITENS ADD CONSTRAINT CHK_PVI_QUANTIDADE_POSITIVA CHECK (QUANTIDADE > 0);

ALTER TABLE CREDITOS_RECEBER ADD CONSTRAINT CHK_CR_VALOR_PAGO CHECK (
  VALOR_PAGO >= 0
  AND VALOR_PAGO <= VALOR_TOTAL
);

ALTER TABLE OBRIGACOES_FINANCEIRAS ADD CONSTRAINT CHK_OB_VALOR_PAGO CHECK (
  VALOR_PAGO >= 0
  AND VALOR_PAGO <= VALOR_TOTAL
);

--------------------------------- Índices em FKs (melhora performance em JOINs) ----------------------------------------------
ALTER TABLE PRODUTOS ADD INDEX IDX_PRODUTOS_FK_CATEGORIA (FK_CATEGORIA),
ADD INDEX IDX_PRODUTOS_FK_FORNECEDOR (FK_FORNECEDOR);

ALTER TABLE ESTOQUES ADD INDEX IDX_ESTOQUES_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE ESTOQUE_MOVIMENTACOES ADD INDEX IDX_EM_PRODUTO (FK_PRODUTO),
ADD INDEX IDX_EM_ACAO (FK_ACAO),
ADD INDEX IDX_EM_ORIGEM (FK_ORIGEM);

ALTER TABLE VENDAS ADD INDEX IDX_VENDAS_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_VENDAS_FK_VENDEDOR (FK_VENDEDOR),
ADD INDEX IDX_VENDAS_FK_SITUACAO (FK_SITUACAO);

ALTER TABLE VENDA_ITENS ADD INDEX IDX_VI_FK_VENDA (FK_VENDA),
ADD INDEX IDX_VI_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE PRE_VENDAS ADD INDEX IDX_PV_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_PV_FK_VENDEDOR (FK_VENDEDOR),
ADD INDEX IDX_PV_FK_SITUACAO (FK_SITUACAO);

ALTER TABLE PRE_VENDA_ITENS ADD INDEX IDX_PVI_FK_PRE_VENDA (FK_PRE_VENDA),
ADD INDEX IDX_PVI_FK_PRODUTO (FK_PRODUTO);

ALTER TABLE CREDITOS_RECEBER ADD INDEX IDX_CR_FK_CLIENTE (FK_CLIENTE),
ADD INDEX IDX_CR_FK_SITUACAO (FK_SITUACAO),
ADD INDEX IDX_CR_FK_FORMA_PAGAMENTO (FK_FORMA_PAGAMENTO);

ALTER TABLE RECEBIMENTOS ADD INDEX IDX_REC_FK_CREDITO (FK_CREDITO_RECEBER),
ADD INDEX IDX_REC_FK_FORMA_PGTO (FK_FORMA_PAGAMENTO);

ALTER TABLE OBRIGACOES_FINANCEIRAS ADD INDEX IDX_OB_FK_FORNECEDOR (FK_FORNECEDOR),
ADD INDEX IDX_OB_FK_SITUACAO (FK_SITUACAO),
ADD INDEX IDX_OB_FK_CATEG_FINANCEIRA (FK_CATEGORIA_FINANCEIRA);

ALTER TABLE PAGAMENTOS ADD INDEX IDX_PG_FK_OBRIGACAO (FK_OBRIGACAO_FINANCEIRA),
ADD INDEX IDX_PG_FK_FORMA_PGTO (FK_FORMA_PAGAMENTO);

ALTER TABLE CATEGORIAS_FINANCEIRAS ADD INDEX IDX_CATF_FK_NATUREZA (FK_NATUREZA_FINANCEIRA);

---------------------------------------------------- SEEDs (dados sugeridos) -----------------------------------------------------------
INSERT INTO ESTOQUE_ACOES_MOVIMENTACAO (ACAO) VALUES
('ENTRADA'),
('SAIDA'),
('DEVOLUCAO'),
('AJUSTE');

INSERT INTO ESTOQUE_ORIGENS_MOVIMENTACAO (ORIGEM) VALUES
('VENDA'),
('COMPRA'),
('PREVENDA'),
('DEVOLUCAO'),
('CORRECAO');
  
INSERT INTO VENDA_ORIGENS (DESCRICAO) VALUES
('VENDA DIRETA (BALCÃO)'),
('PRÉ-VENDA CONVERTIDA'),
('VENDA ONLINE'),
('VENDA POR TELEFONE'),
('VENDA EXTERNA (REPRESENTANTE)'),
('VENDA MANUAL/LIVRE');

INSERT INTO VENDA_SITUACOES (DESCRICAO) VALUES
('EM ABERTO'),
('FINALIZADA'),
('CANCELADA'),
('PAGAMENTO PENDENTE');

INSERT INTO PRE_VENDA_SITUACOES (DESCRICAO) VALUES
('RESERVADA'),
('FINALIZADA'),
('CANCELADA'),
('DEVOLVIDA PARCIALMENTE');

INSERT INTO FORMAS_PAGAMENTO (NOME) VALUES
('DINHEIRO'),
('PIX'),
('CREDIÁRIO'),
('CARTÃO'),
('BOLETO'),
('DOAÇÃO');

INSERT INTO SITUACOES_FINANCEIRAS (NOME, DESCRICAO, COR) VALUES
('ABERTA','Conta aberta aguardando pagamento','#CCCCCC'),
('PAGA', 'Conta quitada', '#00CC00'),
('ATRASADA', 'Pagamento em atraso', '#FF0000'),
('PARCIALMENTE_PAGA','Conta parcialmente quitada','#FF9900'),
('NEGOCIADA','Conta renegociada com novo vencimento','#0066CC'),
('CANCELADA','Conta cancelada por erro ou devolução','#999999'),
('ISENTA','Conta isenta de cobrança','#0099CC'),
('EM_DISPUTA','Conta em análise ou contestação','#CC0066'),
('ANTECIPADA','Conta paga antes do vencimento','#006600');

INSERT INTO NATUREZAS_FINANCEIRAS (NOME, DESCRICAO) VALUES
('RECEITA', 'Entrada de valores'),
('DESPESA', 'Saída de valores'),
('TRANSFERENCIA','Transferência entre contas ou caixas'),
('ESTORNO', 'Reversão de receita ou despesa'),
('INVESTIMENTO','Aplicações financeiras ou aquisição de ativos'),
('EMPRESTIMO', 'Valores recebidos de terceiros'),
('PAGAMENTO','Quitação de obrigação financeira'),
('DEVOLUCAO','Estorno por devolução de produto ou serviço'),
('AJUSTE','Correções ou ajustes contábeis manuais');

INSERT INTO CATEGORIAS_FINANCEIRAS (NOME, DESCRICAO, FK_NATUREZA_FINANCEIRA) VALUES
('CREDIÁRIO LOJA FÍSICA','Venda parcelada no crediário interno',1),
('CARTÃO DE CRÉDITO','Venda parcelada via operadora',1),
('PIX IMEDIATO', 'Recebimento à vista via PIX', 1),
('BOLETO BANCÁRIO','Recebimento programado via boleto',1),
('VENDA ONLINE','Receita gerada por e-commerce',1),
( 'DISTRIBUIDOR',  'Vendas para distribuidores',1),
( 'REPRESENTANTE','Vendas via representante comercial',1),
( 'SERVICOS',     'Receita de serviços prestados',1);
('FORNECEDOR ESTOQUE','Compra de produtos para revenda',2),
('DESPESA FIXA - ALUGUEL','Pagamento mensal do ponto físico',2),
('CAMPANHA MARKETING','Investimento em divulgação',5);

INSERT INTO PERFIS (NOME, DESCRICAO) VALUES
('ADMINISTRADOR', 'Acesso total'),
('VENDEDOR', 'Permissões de Venda'),
('FINANCEIRO','Acesso ao módulo financeiro, exibição de relatórios');

------------------------------------------- TESTES ------------------------------------------------
/* Simular um fluxo completo de venda a prazo, envolvendo:
1. Cadastro de um cliente.
2. Cadastro de um usuário com perfil de vendedor.
3. Realização de uma venda com produtos.
4. Geração de contas a receber associadas à venda.
5. Definição da forma de pagamento e da situação financeira. */

-- Cliente
INSERT INTO CLIENTES (NOME, CPF, TELEFONE, LIMITE_CREDIARIO)
VALUES ('Maria da Silva', '12345678901', '19991234567', 1000.00);
SET @ID_CLIENTE = LAST_INSERT_ID();

-- Usuário vendedor
INSERT INTO USUARIOS (NOME, EMAIL, HASH_SENHA)
VALUES ('Carlos Vendedor', 'carlos@loja.com', 'senha123_hash');
SET @ID_USUARIO = LAST_INSERT_ID();

-- Perfil e vínculo
INSERT INTO PERFIS (NOME, DESCRICAO) VALUES ('VENDEDOR', 'Permite realizar vendas');
SET @ID_PERFIL = LAST_INSERT_ID();

INSERT INTO USUARIOS_PERFIS (FK_USUARIO, FK_PERFIL)
VALUES (@ID_USUARIO, @ID_PERFIL);

-- Vendedor (ID igual ao do usuário)
INSERT INTO VENDEDORES (ID, APELIDO, PERCENTUAL_COMISSAO)
VALUES (@ID_USUARIO, 'Carlos', 5.0);

-- Venda
INSERT INTO VENDAS (FK_CLIENTE, FK_VENDEDOR, DATA_VENDA, VALOR_TOTAL, TIPO_PAGAMENTO)
VALUES (@ID_CLIENTE, @ID_USUARIO, NOW(), 200.00, 'CREDIARIO');
SET @ID_VENDA = LAST_INSERT_ID();

-- Itens da venda
INSERT INTO VENDAS_ITENS (FK_VENDA, DESCRICAO_ITEM, QUANTIDADE, PRECO_UNITARIO)
VALUES
(@ID_VENDA, 'Camisa Polo', 1, 120.00),
(@ID_VENDA, 'Calça Jeans', 1, 80.00);

-- Contas a receber (parcelado em 2x)
INSERT INTO CONTAS_RECEBER (
  FK_CLIENTE, FK_VENDA, DATA_LANCAMENTO, VALOR_TOTAL, DATA_VENCIMENTO, FK_FORMA_PAGAMENTO, FK_SITUACAO_FINANCEIRA
) VALUES
(@ID_CLIENTE, @ID_VENDA, NOW(), 100.00, DATE_ADD(NOW(), INTERVAL 15 DAY), 2, 1),
(@ID_CLIENTE, @ID_VENDA, NOW(), 100.00, DATE_ADD(NOW(), INTERVAL 30 DAY), 2, 1);

